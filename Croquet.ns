Newspeak3
'Root'
class Croquet usingPlatform: platform = (
	|
    (* Javascript *)
    window = platform js global.
    doc = window at: 'document'.
    body = doc at: 'body'.
    JSFunction = window at: 'Function'.
    JSObject = window at: 'Object'.
    JSNumber = window at: 'Number'.

    (* Croquet *)
	MultisynqModel = (window at: 'Multisynq') at: 'Model'.
    MultisynqSession = (window at: 'Multisynq') at: 'Session'.
    MultisynqApp = (window at: 'Multisynq') at: 'App'.
        
    (* Hopscotch *)
    Presenter = platform hopscotch Presenter.
    Subject = platform hopscotch Subject.
	|
) (
public class Chalculator = (
	| chalculatorModel chalculatorView |
) (
public chalculatorExtensionsSource = (
	^'var interpretations = new Map();
interpretations.set("Purpose",["Leader","Diplomat","Creator","Bullder","Traveller","Teacher","Thinker","Judge","Healer","Visionary","Statesman"]);
interpretations.set("Heart",["Pioneering","Friendly","Self Expression","Practical","Variety","Love','Intellect","University","Invention","Idealism"]);
interpretations.set("Persona",["Independent","Agreeable","Sociable","Practical","Adventurous","Contemplative","Intelligent","Ambitious","Sincere","Idealistic","Midas"]);
interpretations.set("Destiny",["Innovator","Peacemaker","Entertainer","Builder","Investigator","Counselor","Spiritualist","Executive","Humanitarian","Enlightenment","Master Builder"]);
interpretations.set("Goal",["Leadership","Advisor","Speaker","Fountainhead","Freedom","Teacher","Philosopher","Judge","Healer","Oracle","Statesman"]);
var chalcString = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
var chalcValues = [0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,8,3,5,1,1,2,3,4,5,7,8,1,2,3,4,6,6,6,5,1,7,1,2,3,4,5,8,3,5,1,1,2,3,4,5,7,8,1,2,3,4,6,6,6,5,1,7,0];

Number.prototype.isGreatNumber = function() {
  return this === 11 || this === 22
}

Number.prototype.reduced = function() {
  var r = this
  while (r > 9 && !r.isGreatNumber()) {
    r = String(r).reduced()
  }
  return r
};

Number.prototype.chalculate = function() {
  return String(this).chalculate()
}

Number.prototype.interpretation = function(aspect) {
  if ((this==0)||(this>11)) { return "Bad Reduction!!" };
  var m = interpretations.get(aspect);
  if (!m) { return "Bad map" };
  return m[this - 1];
};

var vowels="aeiouAEIOU",consonants="bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPRSTVWXYZ";
String.prototype.vowels=function(){
  var r="";
  for (let i=0; i<this.length; i++) {
    if (vowels.indexOf(this[i]) > -1) { r+=this[i] }
  }
  return r
};

String.prototype.consonants=function() {
  var r="";
  for (let i=0; i<this.length; i++) {
    if (consonants.indexOf(this[i]) > -1) { r+=this[i] }
  }
  return r;
};

String.prototype.reduced = function() {
  var c,x,rslt=0;
  if ((this === "11") || (this === "22")) { return this }
  for (let i=0; i<this.length; i++) {
    c=this[i];
    x=chalcString.indexOf(c);
    if (x<0) { continue };
    rslt+=Number(chalcValues[x]);
  };
  while ((rslt.reduced()>9)&&(!rslt.reduced().isGreatNumber())) { rslt = rslt.reduced() }
  return rslt;
};

String.prototype.chalculate = function(aspect) {
  var sum = this.reduced();
  while (sum.toString().length > 2) {
    sum = sum.reduced();
    if ((sum==11)||(sum==22)) { break };
  }
  var i=0,n=sum.reduced();
  if ((n==11)||(n==22)) { i = (n==11)?10:11 }
  else {
    while (n.toString().length >1) {
      sum = n;
      n = n.reduced();
    };
    i=n;
  };
  if ((n==11)||(n==22)) {
    var klass=(n==11)?"eleven":"twentytwo";
    return span(2,aspect,klass) + span(1,n.toString(),klass) + span(3,i.interpretation(aspect),klass) + span(3,"[ " + sum.toString() + " ]",klass)
  }
  return span(2,aspect) + span(1,n.toString()) + span(3,i.interpretation(aspect)) + span(3,"[ " + sum.toString() + " ]")
}

function span(width,text,klass) {
  if (klass) { return "<td class=\""+klass+"\">"+text+"</td>" }
  return "<td>"+text+"</td>"
  //return "<div class=\"col-sm-"+width+"\">"+text+"</div>"
}'
)
public startup = (
	| decl session options m v |
    html.
    decl:: JSFunction new: chalculatorExtensionsSource.
    decl call.

    decl:: JSFunction new: chalculatorModelSource.
    chalculatorModel: decl call. 
    chalculatorModel register: 'chalculatorModel'.

    decl:: JSFunction new: chalculatorViewSource.
    chalculatorView: decl call.
    (* debug:: JSArray new.
    debug push: "classes".*)
    options:: JSObject new
        at: 'apiKey' put: '2uxfxxfqDCcdSY7qTNln84f9TexqFpFgX4BOk5rJs6';
        at: 'appId' put: 'com.chalculator.app';
        at: 'name' put: MultisynqApp autoSession;
        at: 'password' put: 'com.chalculator.01';
        at: 'model' put: chalculatorModel;
        at: 'view' put: chalculatorView;
        at: 'debug' put: 'classes';
        yourself.
    session:: MultisynqSession join: options.
	(*
    session then: [ :s |
    	| blk |
        blk: [ :t :f | s step: t.
            Timer after: 500 do: [ :x | window requestAnimationFrame: blk ]].
        window requestAnimationFrame: blk
    ]
    *)
)
public chalculatorModelSource = (
	^'class ChalculatorModel extends Multisynq.Model {
  init() {
    //People vars
    this.birthName="";
    this.birthDate="";
    this.birthMonth=0;
    this.birthDay=0;
    this.birthYear=0;
    this.purpose="<td>Purpose</td>";
    this.heart="<td>Heart</td>";
    this.persona="<td>Persona</td>";
    this.destiny="<td>Destiny</td>";
    this.goal="<td>Goal</td>";

    //Things vars
    this.miscVibration=""
    this.miscTranslation=""
    this.miscCompostion=""

    //Chat
    this.views=new Map();
    this.history=new Array();
    this.currentTab="people";

    //Subscriptions
    this.subscribe("chalculate","chalculate",this.chalculate);
    //this.subscribe("chalculate","chalcclear",this.clearProfile);
    //this.subscribe("chalculate","misc",this.miscChalculate)
  }

  chalculate(data) {
  console.log("chalculating: " + data)
    var vals = data.split(";");
    if (vals.length != 2) { this.doError("We have a BIG problem"); return }
    this.birthName = vals[0];
    this.birthDate = vals[1];
    if (this.birthName == "") { this.doError("Birth Name cannot be blank"); return }
    if (this.birthDate == "") { this.doError("Birth Date cannot be blank"); return }
    var dateNumbers = this.birthDate.split("/");
    if (dateNumbers.length != 3) { this.doError("Birth Date is invalid"); return };
    var bm = Number(dateNumbers[0]);
    var bd = Number(dateNumbers[1]);
    var by = Number(dateNumbers[2]);
    if (Number.isNaN(bm)) { this.doError("Month is invalid"); return; }
    if (Number.isNaN(bd)) { this.doError("Day is invalid"); return; }
    if (Number.isNaN(by)) { this.doError("Year is not valid"); return; };
    if (bm < 1)  { this.doError("Month must be from 1 to 12"); return };
    if (bm > 12) { this.doError("Month must be from 1 to 12"); return };
    if (bd < 1)  { this.doError("Day must be from 1 to 31"); return };
    if (bd > 31) { this.doError("Day must be from 1 to 31"); return };
    this.birthMonth = bm;
    this.birthDay = bd;
    this.birthYear = by;
    this.purpose=this.birthName.chalculate("Purpose");
    this.heart=this.birthName.vowels().chalculate("Heart");
    this.persona=this.birthName.consonants().chalculate("Persona");
    this.destiny=this.birthDate.chalculate("Destiny");
    this.goal=(this.birthName + this.birthDate).chalculate("Goal");
    this.publish("update","profile");
  }

  miscChalculate(data) {
    this.miscComposition=data.reduced()
    this.miscVibration=this.miscComposition.reduced()
    var idx=(this.miscVibration!=11&&this.miscVibration!=22)?
        this.miscVibration:((this.miscVibration=11)?10:11)
    if (idx>=1&&idx<=11){
      this.miscTranslation=idx.interpretation("Heart")
    } else {
      this.miscTranslation="An error occurred"
    }
    this.publish("update","things")
  }

  clearProfile() {
    this.birthName="";
    this.birthDate="";
    this.purpose="<td>Purpose</td>";
    this.heart="<td>Heart</td>";
    this.persona="<td>Persona</td>";
    this.destiny="<td>Destiny</td>";
    this.goal="<td>Goal</td>";
    this.publish("update","profile");
  }

  doError(data) { this.publish("update","error",data) }

  changeTabs(data) {
    this.currentTab = data
    this.publish("update","tabs")
  }
}
return ChalculatorModel'
)
public chalculatorViewSource = (
	^'class ChalculatorView extends Multisynq.View {
  constructor(model) {
    console.log("chalculator view constructor")
    super(model)
    this.model = model

    //Tabs
    //peopletab.onclick = event => this.onTabs("people");
    //thingstab.onclick = event => this.onTabs("things");

    //People tab
    this.subscribe("update", "profile", this.updateProfile)
    chalculate.onclick = event => this.onClick(event);
    //chalcclear.onclick = event => this.onClear(event);

    //Things tab
    //miscchalculate.onclick = event => this.chalcMisc(event);
  }

  onClick() {
  console.log("clicked")
    errors.innerText = "";  //Clear any prior errors
    var data = nameInput.value + ";" + bdInput.value;
    this.publish("chalculate","chalculate",data);
  }

  onClear() {
    this.publish("chalculate","chalcclear");
  }

  updateProfile() {
  	console.log("updating view")
    nameInput.value = this.model.birthName;
    bdInput.value = this.model.birthDate;
    purpose.innerHTML = this.model.purpose;
    heart.innerHTML = this.model.heart;
    persona.innerHTML = this.model.persona;
    destiny.innerHTML = this.model.destiny;
    goal.innerHTML = this.model.goal;
  }

  chalcMisc() {
    this.publish("chalculate","misc",miscInput.value)
  }

  updateThings(data) {
    //miscvibration.innerHTML="<h2>"+this.model.miscVibration+"</h2>";
    //misctranslation.innerHTML="<h4>"+this.model.miscTranslation+"</h4>";
    //misccomposition.innerHTML="<h6>"+this.model.miscComposition+"</h6>";
  }

  updateErrors(data) { 
  	//errors.innerText = data 
  }

  onTabs(data) {
    this.publish("tabs","change",data)
  }

  updateTabs() {
    if (this.model.currentTab=="people") {
      people.style.display="block"
      //peopletab.classList.add("active")
      t//hings.style.display="none"
      //thingstab.classList.remove("active")
      return
    }
    if (this.model.currentTab=="things") {
      //people.style.display="none"
      //peopletab.classList.remove("active");
      //things.style.display="block"
      //thingstab.classList.add("active");
    };
  }

  exit() {
    this.session.leave();
  }
}
return ChalculatorView'.
)
public html = (
|
nameInput
bdInput
chalculate
purpose
heart
persona
destiny
goal
errors
|
(doc getElementById: 'nameInput') isNil
	ifTrue: [
        nameInput:: doc createElement: 'input'.
        nameInput at: 'type' put: 'text'; at: 'id' put: 'nameInput'.
        body appendChild: nameInput.
	].
(doc getElementById: 'bdInput') isNil
	ifTrue: [
        bdInput:: doc createElement: 'input'.
        bdInput at: 'type' put: 'text'; at: 'id' put: 'bdInput'.
        body appendChild: bdInput.
	].
(doc getElementById: 'chalculate') isNil
	ifTrue: [
    	'creating chalculate' out.
        chalculate:: doc createElement: 'button'.
        chalculate at: 'id' put: 'chalculate'; at: 'innerText' put: 'Chalculate'.
        body appendChild: chalculate.
	].
(doc getElementById: 'purpose') isNil
	ifTrue: [
        purpose:: doc createElement: 'p'.
        purpose at: 'id' put: 'purpose'; at: 'style' put: 'height:25px;border: 1px solid gray'.
        body appendChild: purpose.
	].
(doc getElementById: 'heart') isNil
	ifTrue: [
        heart:: doc createElement: 'p'.
        heart at: 'id' put: 'heart'; at: 'style' put: 'height:25px;border: 1px solid gray'.
        body appendChild: heart.
	].
(doc getElementById: 'persona') isNil
	ifTrue: [
        persona:: doc createElement: 'p'.
        persona at: 'id' put: 'persona'; at: 'style' put: 'height:25px;border: 1px solid gray'.
        body appendChild: persona.
	].
(doc getElementById: 'destiny') isNil
	ifTrue: [
        destiny:: doc createElement: 'p'.
        destiny at: 'id' put: 'destiny'; at: 'style' put: 'height:25px;border: 1px solid gray'.
        body appendChild: destiny.
	].
(doc getElementById: 'goal') isNil
	ifTrue: [
        goal:: doc createElement: 'p'.
        goal at: 'id' put: 'goal'; at: 'style' put: 'height:25px;border: 1px solid gray'.
        body appendChild: goal.
	].
(doc getElementById: 'errors') isNil
	ifTrue: [
        errors:: doc createElement: 'div'.
        errors at: 'id' put: 'errors'; at: 'style' put: 'height:125px;border: 1px solid red; color: red'.
        body appendChild: errors.
	].
)
) : (
)
) : (
)
