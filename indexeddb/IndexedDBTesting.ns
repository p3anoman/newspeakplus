Newspeak3
'Root'
public class IndexedDBTesting usingPlatform: p <Platform>
										testFramework: minitest <Minitest>
                                        indexedDB: idb <IndexedDB>
(* :exemplar: IndexedDBTesting usingPlatform: platform
										testFramework: (Minitest usingPlatform: platform)
                                        indexedDB: (IndexedDB usingPlatform: platform)
*)
= (
	|
    private List = p collections List.
	private TestContext = minitest TestContext.
    public IDBSubject  = idb IDBSubject.
    public IDBObject = idb IDBObject.

    (* Not IDB specific *)
    private Serializer = p victoryFuel Serializer.
    private Deserializer = p victoryFuel Deserializer.
    private JSObject = p js global at: 'Object'.
    private JSArray = p js global at: 'Array'.
    private JSUint8Array = p js global at: 'Uint8Array'.
    private JSBlob = p js global at: 'Blob'.
    private JSDate = p js global at: 'Date'.
    public Alien = p js Alien.
    
    testDate = JSDate new.
	|
) (
public class IDBTestingSubject onModel: m <Object>
= IDBSubject onModel: m
						modelClasses: (List new
                        								add: IDBTestingModel;
                                                        add: IDBTestingChildModel;
                                                        yourself)
                        databaseName: 'TestingDB'
                        databaseVersion: 1 (
	| 
   	onAddCallback <[:Event]>
    onDeleteCallback <[:String]>
    onPutCallback <[:String]>
    onGetCallback <[:IDBObject]>
    onGetAllCallback <[:List[IDBObject]]>
    onGetKeysCallback <[:List[String]]>
    
    public basicModel <IDBTestingModel> = IDBTestingModel new slot1: 'foo'; slot2: 'bar'; yourself.
    public childModel1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'foo1'; slotB: 'bar1'; yourself.
    public childModel2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'foo2'; slotB: 'bar2'; yourself.
    public complexModel <IDBTestingModel> = IDBTestingModel new slot1: 'complex'; slot2: modelChild1; yourself.
    public listModel <IDBTestingModel> = IDBTestingModel new slot1: 'list'; slot2: (List new 
    																										add: childModel1;
                                                                                                            add: childModel2;
                                                                                                            yourself); yourself.
    |
	'IDBTestingSubject factory' out.
) (
public deleteTestObject: m <IDBTestingModel> = (
    deleteTestObject: m onComplete: [ :x | nil ].
)
public addTestObject: o <IDBObject> = (
   addTestObject: o onComplete: [ :x | nil ]
 )
public startUp: successHandler = (
	openDB: databaseVersion
    	onSuccess: [ :e <Alien[Event]> |
    	db:: (e at: 'target') at: 'result'.
        successHandler value: e.
        nil ]
        onFailure: [ :e | ].
)
onGet: o <IDBObject> = (
    onGetCallback value: o
)
onDelete: uuid <String> = (
	(* NB: This uuid will be undefined on succcess *)
    onDeleteCallback value: uuid
)
onGetAll: list <List[IDBObject]>  = (
    onGetAllCallback value: list
)
onGetKeys: list <List[String]> = (
	getKeysCallback value: list
)
onPut: uuid <String> = (
   onPutCallback value: uuid
)
onAdd: uuid <String> = (
    onAddCallback value: uuid
)
public putTestObject: m onComplete: completionHandler <Closure> = (
    onPutCallback: completionHandler.
	put: m
)
public addTestObject: m onComplete: completionHandler <Closure> = (
	onAddCallback: completionHandler.
    startUp: [ :e | add: m. nil ]
)
public deleteTestObject: m <IDBTestingModel> onComplete: completionHandler <Closure> = (
    onDeleteCallback: completionHandler.
	startUp: [ :e | delete: m ].
)
public serializeTest: o = (
	^serialize: o
)
public serializeDeserializeTest: blob <Alien[Blob]> onResolved: handler = (
	| p = blob arrayBuffer. |
    p then: [ :buf |  handler value: (deserialize: buf) ].
)
public addTestObjects: list <List[IDBObject]> onComplete: completionHandler <[]> = (
	onAddCallback: [:e | nil ].
    startUp: [ :e |
    	list do: [ :item | add: item ].
   		completionHandler value
	nil ].
)
public getAllTest: completionHandler <[:List[IDBModel]]> = (
	onGetAllCallback: completionHandler.
 	startUp: [ :e | getAll: IDBTestingModel ].
)
public getKeysTest: c <Closure> = (
	onGetKeysCallback: c.
	startUp: [ :e | getKeys: IDBTestingModel ]
 )
public getTest: completed <[:Alien[Event]]> = (
	onGetCallback: completed.
	startUp: [ :e | get: basicModel uuid forClass: IDBTestingModel ]
)
) : (
)
public class IDBTestingModel = IDBObject (
	|
	public slot1
	public slot2
	|
) (
) : (
)
public class IDBTestingChildModel = IDBObject (
	|
	public slotA
	public slotB
	|
) (
) : (
)
public class IDBTests = TestContext (
	| subject = IDBTestingSubject onModel: List new. |
    subject openDB: 1 onSuccess: [ :e | nil ].
    'IDBTests test context' out.
) (
public testGetKeys: successHandler <[:List[UUID]]>= (
	subject getKeys: successhandler
)
eventResult: e = (
	^(e at: 'target') at: 'result'
)
public cleanUp = (
	(* indexedDB deleteDatabase: 'List' *)
)
public testDelete = (
	| m = modelBasic. |
    subject addTestObject: m onComplete: [ :uuida | 
    subject deleteTestObject: m onComplete: [ :uuid <String> |
            assert: [ uuid isUndefined ] message: 'Object not deleted: ', uuid printString.
            nil
            ].
		nil]
)
public testAdd = (
	| m = modelBasic. |
    subject addTestObject: m onComplete: [ :uuid <String> |
    	deny: [ uuid = '' ]. 
    	assert: [ uuid = m uuid ] message: 'UUIDs do not agree'.
    	nil
    ]
)
public testSerializeDeserializeIDB = (
	| o o2 c l jso |
    o:: modelBasic.
    jso:: subject serializeTest: o.
    subject serializeDeserializeTest: (jso at: 'psoup') onResolved: [ :r | o2:: r.
    o2 reconstituteAliens: (jso at: 'aliens').
    assert: [ o2 slot1 printString = testDate printString ] message: 'Slot1 alien is not correct'.
    assert: [ o2 slot2 = 'bar' ] message: 'Slot2 is not correct'.
	nil ].
    
)
public testSerializeDeserializeIDBComplex = (
	| o o2 c jso |
    o:: modelComplex.
    jso:: subject serializeTest: o.
    subject serializeDeserializeTest: (jso at: 'psoup') onResolved: [ :o2 |
    o2 reconstituteAliens: (jso at: 'aliens').
    assert: [ o2 slot1 = 'complex' ] message: 'Slot1 is not correct'.
    c:: o2 slot2.
    assert: [ c isKindOfIDBObject ] message: 'Child object not deserialized'.
    assert: [ c slotA = 'foo1' ] message: 'Child slotA is not correct'.
    assert: [ c slotB printString = testDate printString ] message: 'Child slotB alien is not correct'.
    nil ].
)
public testGet = (
	subject addTestObject: subject basicModel onComplete: [ :e |
		subject getTest: [ :r |
        	assert: [ r isKindOfIDBObject ] message: 'Get failed'.
            assert: [ r slot1 = subject basicModel slot1 ] message: 'Get failed slot1: ', r slot1 printString, ' does not equal ', subject basicModel slot1 printString.
        nil ].
	nil ].
)
public testPut = (
	| m = modelBasic. |
    subject addTestObject: m onComplete: [
        m slot1: 'changed slot1'.
        subject putTestObject: m onComplete: [ :e <Alien[Event]> |
                | uuid <String> |
                uuid:: eventResult: e.
                deny: [ uuid isNil].
                subject deleteTestObject: m.
                nil
        ].
	nil
    ]
)
public testSerializeDeserializeIDBList = (
	| o o2 c l jso |
    o:: modelList.
    jso:: subject serializeTest: o.
    subject serializeDeserializeTest: (jso at: 'psoup') onResolved: [ :o2 |
        o2 reconstituteAliens: (jso at: 'aliens').
        assert: [ o2 slot1 = 'list' ] message: 'Slot1 is not correct'.
        l:: o2 slot2.
        assert: [ l size = 2 ] message: 'List object not deserialized (wrong size)'.
        c:: l first.
        assert: [ c slotA = 'foo1' ] message: 'List Child1 slotA is not correct'.
        assert: [ c slotB printString = testDate printString ] message: 'Child1 slotB alien is not correct'.
        c:: l last.
        assert: [ c slotA printString = testDate printString ] message: 'List Child2 slotA is not correct'.
        assert: [ c slotB = 'bar2'  ] message: 'Child2 slotB is not correct'.
    	nil ].
)
public testGetKeys = (
	subject getKeysTest: [ :keys <List[UUID]> |
    	assert: [ keys size > 0 ] message: 'Get keys returned 0 keys'.
	]
)
public testGetAll = (
	| items <List> = List new
    					add: modelBasic;
                        add: modelBasic;
                        add: modelBasic;
                        yourself. |
	subject addTestObjects: items onComplete: [ 
        subject getAllTest: [ :list <List[IDBObject]> |
                assert: [ list size > 0 ] message: '0 results returned'.
                (* assert: [ list size = items size ] message: 'Wrong number results returned'. *)
                assert: [ list first isKindOfIDBObject ] message: 'Not an IDBObject'.
                assert: [ list first slot1 = subject basicModel slot1 ] message: 'Slot1 failed'.
                list do: [ :toBeDeleted <IDBObject> |
                    subject deleteTestObject: toBeDeleted ] ].
	nil ]
)
public testGetAllComplex = (
	| items <List> = List new
    					add: modelComplex;
                        add: modelComplex;
                        add: modelComplex;
                        yourself. |
    items do: [ :item | subject addTestObject: item ].
	subject getAllTest: [ :list <List[IDBObject]> |
    	| m complex <IDBTestingModel> | 
			assert: [ list size > 0 ] message: '0 results returned'.
			(* assert: [ list size = items size ] message: '# of results returned: ', list size printString, ' does not equal 3'. *)
            m: list first. complex: items first.
			assert: [ m isKindOfIDBObject ] message: 'Not an IDBObject'.
			assert: [ complex slot2 slotA = m slot2 slotA ] message: 'getAll failed c2 slotA'.
			assert: [ complex slot2 slotB = m slot2 slotB ] message: 'getAll failed c2 slotB (alien date)'.
                list do: [ :toBeDeleted <IDBObject> |
                    subject deleteTestObject: toBeDeleted ] .
            nil ]
)
public testGetAllList = (
	| items <List> = List new
    					add: modelList;
                        add: modelList;
                        add: modelList;
                        yourself. |
    items do: [ :item | subject addTestObject: item ].
	subject getAllTest: [ :list <List[IDBObject]> |
    	| m m2 sublist1 sublist2 listModel <IDBTestingModel> = subject listModel. | 
			assert: [ list size > 0 ] message: '0 results returned'.
            m: list first. m2: items first.
			assert: [ m isKindOfIDBObject ] message: 'Not an IDBObject'.
			assert: [ m2 slot1 = m slot1 ] message: 'getAll failed List slotA'.
            sublist1: m slot2. sublist2: m2 slot2. 
            assert: [ sublist1 size > 0 ] message: 'getAll failed List. List is empty'.
            assert: [ sublist1 size = sublist2 size ] message: 'getAll listModel failed list sizes not eaqual'.
            m: sublist1 first. m2: sublist2 first.
			assert: [ m slotB = m2 slotB ] message: 'getAll List failed. child slotB'.
			assert: [ m slotA = m2 slotA ] message: 'getAll List failed. child slotA'.
                list do: [ :toBeDeleted <IDBObject> |
                    subject deleteTestObject: toBeDeleted ].
			nil
            ]
)
) : (
TEST_CONTEXT = ()
)
public class VictoryFuelTests = TestContext (
) (
public xtestClosures = (
	|
    serializer <Serializer> = Serializer new.
    deserializer <Deserializer> = Deserializer new.
    m <IDBTestingModel> = IDBTestingModel new slot1: [ :a :b | ^a + b ]; slot2: 'buzz'; yourself.
	b <ByteArray>
    o <IDBTestingModel>
    |
	'Testing DS...' out.
    victoryFuel useAdditionalObjects: { IDBTestingModel. IDBTestingChildModel. }.
	b:: serializer serialize: m.
    o:: deserializer deserialize: b.
    assert: [ o slot1 = m slot1 ] message: 'Serialize/Deserialize failed slot1'.
    assert: [ o slot2 = m slot2 ] message: 'Serialize/Deserialize failed slot2'.
)
public testSerializeDeserializeComplex = (
	|
    serializer = Serializer withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.
    deserializer = Deserializer new.
    c1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 42; slotB: 'ninety'; yourself.
    c2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'c2'; slotB: 'xyz'; yourself.
    m1 <IDBTestingModel> = IDBTestingModel new
                                                                                slot1: c1;
    																			slot2: c2;
                                                                                yourself.
    m2 <IDBTestingModel>
    b <ByteArray>
    o <IDBTestingModel>
    |
	'Testing DS Complex...' out.
	b:: serializer serialize: m1.
    m2:: deserializer deserialize: b.
	assert: [ m2 slot1 slotA = m1 slot1 slotA ] message: 'Complex Serialize/Deserialize failed c1 slotA'.
	assert: [ m2 slot1 slotB = m1 slot1 slotB ] message: 'Complex Serialize/Deserialize failed c1 slotB'.
	assert: [ m2 slot2 slotA = m1 slot2 slotA ] message: 'Complex Serialize/Deserialize failed c2 slotA'.
	assert: [ m2 slot2 slotB = m1 slot2 slotB ] message: 'Complex Serialize/Deserialize failed c2 slotB'.
)
public testSerializeDeserializeArray = (
	|
    serializer <Serializer> = Serializer withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.
    deserializer <Deserializer> = Deserializer new.
    c1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 42; slotB: 'ninety'; yourself.
    c2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'c2'; slotB: 'xyz'; yourself.
    m1 <IDBTestingModel> = IDBTestingModel new
                                                                                slot1: '42';
    																			slot2: ((Array new: 2) at: 1 put: c1; at: 2 put: c2; yourself);
                                                                                yourself.
    m2 <IDBTestingModel>
    b <ByteArray>
    a1 <List>
    a2 <List>
    x1 <String>
    x2 <String>
    |
	'Testing DS Array...' out.
    b:: serializer serialize: m1.
    m2:: deserializer deserialize: b.
	assert: [ m2 slot1 = m1 slot1 ] message: 'List Serialize/Deserialize failed slot1'.

    a1:: m1 slot2. a2:: m2 slot2.
    x1:: a1 at: 1. x2:: a2 at: 1.
    assert: [ x1 slotA = x2 slotA ] message: 'Array failed Item 1 slotA: ', x1 slotA printString, ' is not equal to ', x2 slotA printString.
    assert: [ x1 slotB = x2 slotB ] message: 'Array failed Item 1 slotB: ', x1 slotB printString, ' is not equal to ', x2 slotB printString.
    x1:: a1 at: 2. x2:: a2 at: 2.
    assert: [ x1 slotA = x2 slotA ] message:  'Array failed Item 2 slotA: ', x1 slotA printString, ' is not equal to ', x2 slotA printString.
    assert: [ x1 slotB = x2 slotB ] message: 'Array failed Item 2 slotB: ', x1 slotB printString, ' is not equal to ', x2 slotB printString.
)
public testSerializeDeserializeList = (
	|
    serializer <Serializer> = Serializer withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.
    deserializer <Deserializer> = Deserializer new.
    c1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 42; slotB: 'ninety'; yourself.
    c2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'c2'; slotB: 'xyz'; yourself.
    m1 <IDBTestingModel> = IDBTestingModel new
                                                                                slot1: '42';
    																			slot2: (List new add: c1; add: c2; yourself);
                                                                                yourself.
    m2 <IDBTestingModel>
    b <ByteArray>
    a1 <List>
    a2 <List>
    c1p
    c2p
    |
	'Testing DS List...' out.
    b:: serializer serialize: m1.
	m2:: deserializer deserialize: b.
	assert: [ m2 slot1 = m1 slot1 ] message: 'List Serialize/Deserialize failed slot1'.

	a2:: m2 slot2. c1p:: a2 first. c2p:: a2 last.
	assert: [ c1 slotA = c1p slotA ] message: 'List Serialize/Deserialize failed Item 1 slotA'.
    assert: [ c1 slotB = c1p slotB ] message: 'List Serialize/Deserialize failed Item 1 slotB'.

	assert: [ c2 slotA = c2p slotA ] message: 'List Serialize/Deserialize failed Item 2 slotA'.
	assert: [ c2 slotB = c2p slotB ] message: 'List Serialize/Deserialize failed Item 2 slotB'.
)
public testSerializeDeserialize = (
	|
    serializer <Serializer> = Serializer withAdditionalSharedObjects: (List new add: IDBTestingModel; add: IDBTestingChildModel; add: Alien; yourself).
    deserializer <Deserializer> = Deserializer new.
    m <IDBTestingModel> = IDBTestingModel new slot1: JSDate new; slot2: 'buzz'; yourself.
	b <ByteArray>
    o <IDBTestingModel>
    |
	b:: serializer serialize: m.
    o:: deserializer deserialize: b.
    assert: [ o slot1 printString = m slot1 printString ] message: 'Serialize/Deserialize failed slot1'.
    assert: [ o slot2 = m slot2 ] message: 'Serialize/Deserialize failed slot2'.
)
) : (
TEST_CONTEXT = (
)
)
public modelComplex =  (
    ^IDBTestingModel new slot1: 'complex'; slot2: modelChild1; yourself
)
public modelBasic =  (
	^IDBTestingModel new slot1: testDate; slot2: 'bar'; yourself.
)
public modelChild1 =  (
	^IDBTestingChildModel new slotA: 'foo1'; slotB: testDate; yourself.
)
public modelChild2 =  (
    ^IDBTestingChildModel new slotA: testDate; slotB: 'bar2'; yourself.
)
public modelList =  (
	| list = List new. |
    list add: modelChild1; add: modelChild2; yourself.
	^IDBTestingModel new slot1: 'list'; slot2: list; yourself
)
) : (
)
