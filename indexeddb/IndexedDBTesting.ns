Newspeak3
'Root'
public class IndexedDBTesting usingPlatform: p <Platform>
										minitest: minitest <Minitest>
                                        indexedDB: idb <IndexedDB>
                                        subjectClass: subjectClass <Class[IDBSubject|IDBVFuelSubject]>
(*
	:exemplar: [ :idb | IndexedDBTesting usingPlatform: platform
										minitest: (Minitest usingPlatform: platform)
                                        indexedDB: idb
                                        subjectClass: idb IDBSubject ] value: (IndexedDB usingPlatform: platform)
*)
= (
	|
	private TestContext = minitest TestContext.
    private List = p collections List.
    public IDBSubjectClass  = subjectClass.
    public IDBObject = idb IDBObject.

	public testConfig = subjectClass name.
	public subject = IDBTestingSubject onModel: List new.
	|
	subject openDB: 1.
) (
public class IDBTestingSubject onModel: m = IDBSubjectClass onModel: m modelClasses: { IDBTestingModel. IDBTestingChildModel. } (
) (
onGetAll: event <Alien[Event]>  = (
	'IDBTestingSubject onGetAll override' out.
	(* Override *)
)
onOpen: event <Alien[Event]> = (
	'IDBTestingSubject openDB' out.
	db:: (event at: #target) at: #result.
)
public openDB: callback <Closure> = (
	super openDB: 1
)
public deleteTestObject: m <IDBTestingModel> onComplete: completionHandler <Closure> = (
    add: m.
	delete: m
    			onComplete: [ :e <Alien[Event]> | completionHandler value: true. nil ]
                onError: [ :e <Alien[Event]> | completionHandler value: false. nil ].
)
public putTestObject: m onComplete: completionHandler <Closure> = (
	add: m.
    m slot2: 'changed value'.
	put: m
    		onComplete: [ :ex <Alien[Event]> | completionHandler value: true. nil ]
            onError: [ :e  <Alien[Event]> | completionHandler value: false. nil ].
)
public addTestObject: m onComplete: completionHandler <Closure> = (
	add: m
    		onComplete: [ :e <Alien[Event]> | completionHandler value: true. nil ]
            onError: [ :e <Alien[Event]> | completionHandler value: false. nil ].
)
public testSerialize: o = (
	^super serialize: o
)
public testDeserialize: o <Alien[Object]>^<IDBObject> = (
	^super deserialize: o
)
public testDeserialize: o <Alien[Object]> onSuccess: aBlock = (
	super deserialize: o onSuccess: aBlock
)
public getTestObject: u forClass: c onComplete: completed = (
	super get: u forClass: c onComplete: completed.
)
) : (
)
public class IDBTestingModel = IDBObject (
	|
	public slot1
	public slot2
	|
) (
) : (
)
public class IDBTests = TestContext (
) (
public cleanUp = (
	(* indexedDB deleteDatabase: 'List' *)
)
public modelChild2 =  (
    ^IDBTestingChildModel new slotA: 'foo2'; slotB: 'bar2'; yourself.
)
public modelChild1 =  (
	^IDBTestingChildModel new slotA: 'foo1'; slotB: 'bar1'; yourself.
)
public modelBasic =  (
	^IDBTestingModel new slot1: 'foo'; slot2: 'bar'; yourself.
)
public modelList =  (
	| list = List new. |
    list add: modelChild1; add: modelChild2; yourself.
	^IDBTestingModel new slot1: 'list'; slot2: list; yourself.
)
public modelComplex =  (
    ^IDBTestingModel new slot1: 'complex'; slot2: modelChild1; yourself.
)
public testAdd = (
    subject addTestObject: modelBasic onComplete: [ :r |
		assert: [ r ] message: 'Add failed' ].
)
public testPut = (
	subject putTestObject: modelBasic onComplete: [ :r |
		assert: [ r ] message: 'Put failed' ]
)
public modelArray =  (
	| list = Array new: 2. |
    list at: 1 put: modelChild1; at: 2 put: modelChild2; yourself.
	^IDBTestingModel new slot1: 'list'; slot2: list; yourself.
)
public testDelete = (
	subject deleteTestObject: modelBasic onComplete: [ :r |
		assert: [ r ] message: 'Failed to delete' ].
)
public testSerializeDeserialize = (
	| m = modelBasic. s o |
    s:: subject testSerialize: m.
   	subject testDeserialize: s onSuccess: [ :o |
    	assert: [ o slot1 = m slot1 ] message: 'Serialize/Deserialize failed slot1'.
    	assert: [ o slot2 = m slot2 ] message: 'Serialize/Deserialize failed slot2'.
	]
)
public testSerializeDeserializeArray = (
	|
    m1 <IDBTestingModel> = modelArray.
    m2 <IDBTestingModel>
    o <Alien[Object]>
    a1 <List>
    a2 <List>
    c1 <IDBTestingChildModel>
    c2 <IDBTestingChildModel>
    |
    o:: subject testSerialize: m1.
    subject testDeserialize: o onSuccess: [ :m2 |
    	assert: [ m2 slot1 = m1 slot1 ] message: 'List Serialize/Deserialize failed slot1'.
    
    	a1:: m1 slot2. a2:: m2 slot2.
    	c1:: a1 at: 1. c2:: a2 at: 1.
    	assert: [ c1 slotA = c2 slotA ] message: 'List Serialize/Deserialize failed Item 1 slotA'.
    	assert: [ c1 slotB = c2 slotB ] message: 'List Serialize/Deserialize failed Item 1 slotB'.
	]
)
public testSerializeDeserializeList = (
	|
    m1 <IDBTestingModel> = modelList.
    m2 <IDBTestingModel>
    o <Alien[Object]>
    a1 <List>
    a2 <List>
    c1 <IDBTestingChildModel>
    c2 <IDBTestingChildModel>
    |
    o:: subject testSerialize: m1.
    subject testDeserialize: o onSuccess: [ :m2 |
		assert: [ m2 slot1 = m1 slot1 ] message: 'List Serialize/Deserialize failed slot1'.
    
    	a1:: m1 slot2. a2:: m2 slot2.
    	c1:: a1 at: 1. c2:: a2 at: 1.
    	assert: [ c1 slotA = c2 slotA ] message: 'List Serialize/Deserialize failed Item 1 slotA'.
    	assert: [ c1 slotB = c2 slotB ] message: 'List Serialize/Deserialize failed Item 1 slotB'.
    	c1:: a1 at: 2. c2:: a2 at: 2.
    	assert: [ c1 slotA = c2 slotA ] message: 'List Serialize/Deserialize failed Item 2 slotA'.
    	assert: [ c1 slotB = c2 slotB ] message: 'List Serialize/Deserialize failed Item 2 slotB'.
	]
)
public testSerializeDeserializeComplex = (
	| m = modelComplex. s o |
    s:: subject testSerialize: m.
    subject testDeserialize: s onSuccess: [ :o |
    	assert: [ o slot1 = m slot1 ] message: 'Complex Serialize/Deserialize failed slot1'.
    	assert: [ o slot2 slotA = m slot2 slotA ] message: 'Complex Serialize/Deserialize failed slot2'
	]
)
public testGet = (
	| m1 = modelBasic. |
    subject addTestObject: m1 onComplete: [ :r |
    	subject getTestObject: m1 uuid forClass: IDBTestingModel onComplete: [ :m2 |
        	assert: [ m1 uuid = m2 uuid ] message: 'Get uuid failed'.
        	assert: [ m1 slot1 = m2 slot1 ] message: 'Get slot1 failed'.
            assert: [ m1 slot2 = m2 slot2 ] message: 'Get slot2 failed'.
		]
	]	
)
) : (
TEST_CONTEXT = ()
)
public class IDBTestingChildModel = (
	|
	public slotA
	public slotB
	|
) (
) : (
)
) : (
)
