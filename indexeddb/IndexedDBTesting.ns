Newspeak3
'Root'
public class IndexedDBTesting usingPlatform: p <Platform>
										testFramework: minitest <Minitest>
                                        indexedDB: idb <IndexedDB>
(* :exemplar: IndexedDBTesting usingPlatform: platform
										testFramework: (Minitest usingPlatform: platform)
                                        indexedDB: (IndexedDB usingPlatform: platform)
*)
= (
	|
    private List = p collections List.
	private TestContext = minitest TestContext.
    public IDBSubject  = idb IDBSubject.
    public IDBObject = idb IDBObject.

    (* Not IDB specific *)
    private Serializer = p victoryFuel Serializer.
    private Deserializer = p victoryFuel Deserializer.
    private JSObject = p js global at: 'Object'.
    private JSArray = p js global at: 'Array'.
    private JSUint8Array = p js global at: 'Uint8Array'.
    private JSBlob = p js global at: 'Blob'.
    private JSDate = p js global at: 'Date'.
    public Alien = p js Alien.
    
    testDate = JSDate new.
    basicModel = modelBasic.
	|
) (
public class IDBTestingSubject onModel: m <Object>
= IDBSubject onModel: m
						storeClasses: { IDBTestingModel }
						modelClasses: { IDBTestingChildModel }
                        databaseName: 'TestingDB'
                        databaseVersion: 1 (
	| 
   	onAddCallback <[:Event]>
    onDeleteCallback <[:String]>
    onPutCallback <[:String]>
    onGetCallback <[:IDBObject]>
    onGetAllCallback <[:List[IDBObject]]>
    onGetKeysCallback <[:List[String]]>
    
    public basicModel <IDBTestingModel> = modelBasic.
    public childModel1 <IDBTestingChildModel> = modelChild1.
    public childModel2 <IDBTestingChildModel> =modelChild2.
    public complexModel <IDBTestingModel> = modelComplex.
    public listModel <IDBTestingModel> = modelList.
    |
) (
public deleteTestObject: m <IDBTestingModel> = (
    deleteTestObject: m onComplete: [ :x | nil ].
)
public addTestObject: o <IDBObject> = (
   addTestObject: o onComplete: [ :x | nil ]
 )
public startUp: successHandler = (
	openDB: databaseVersion
    	onSuccess: [ :e <Alien[Event]> |
    	db:: (e at: 'target') at: 'result'.
        successHandler value: e.
        nil ]
        onFailure: [ :e | ].
)
onGet: o <IDBObject> = (
    onGetCallback value: o
)
onDelete: uuid <String> = (
	(* NB: This uuid will be undefined on succcess *)
    onDeleteCallback value: uuid
)
onGetAll: list <List[IDBObject]>  = (
    onGetAllCallback value: list
)
onPut: uuid <String> = (
   onPutCallback value: uuid
)
onAdd: uuid <String> = (
    onAddCallback value: uuid
)
public putTestObject: m onComplete: completionHandler <Closure> = (
    onPutCallback: completionHandler.
	put: m
)
public addTestObject: m onComplete: completionHandler <Closure> = (
	onAddCallback: completionHandler.
    startUp: [ :e | add: m. nil ]
)
public deleteTestObject: m <IDBTestingModel> onComplete: completionHandler <Closure> = (
    onDeleteCallback: completionHandler.
	startUp: [ :e | delete: m ].
)
public serializeTest: o = (
	^serialize: o
)
public serializeDeserializeTest: blob <Alien[Blob]> onResolved: handler = (
	| p = blob arrayBuffer. |
    p then: [ :buf |  handler value: (deserialize: buf) ].
)
public getAllTest: completionHandler <[:List[IDBModel]]> = (
	onGetAllCallback: completionHandler.
 	startUp: [ :e | getAll: IDBTestingModel ].
)
public getKeysTest: c <Closure> = (
	onGetKeysCallback: c.
	startUp: [ :e | getKeys: IDBTestingModel ]
 )
public getTest: m onComplete: completed <[:Alien[Event]]> = (
	onGetCallback: completed.
	startUp: [ :e | get: m uuid forClass: IDBTestingModel ]
)
public addTestObjects: list <List[IDBObject]> onComplete: completionHandler <[]> = (
	onAddCallback: [ :e | nil ].
    startUp: [ :e |
    	list do: [ :item | add: item ].
   		completionHandler value: list.
	nil ].
)
onGetKeys: list <List[String]> = (
	onGetKeysCallback value: list
)
) : (
)
public class IDBTestingModel = IDBObject (
	|
	public slot1
	public slot2
	|
) (
) : (
)
public class IDBTestingChildModel = IDBObject (
	|
	public slotA
	public slotB
	|
) (
) : (
)
public class IDBTests = TestContext (
	| subject = IDBTestingSubject onModel: List new. |
    subject openDB: 1 onSuccess: [ :e | nil ].
) (
public testGetKeys: successHandler <[:List[UUID]]>= (
	subject getKeys: successhandler
)
eventResult: e = (
	^(e at: 'target') at: 'result'
)
public cleanUp = (
	(* indexedDB deleteDatabase: 'List' *)
)
public testDelete = (
	| m = modelBasic. |
    subject addTestObject: m onComplete: [ :uuida | 
    subject deleteTestObject: m onComplete: [ :uuid <String> |
            assert: [ uuid isUndefined ] message: 'Object not deleted: ', uuid printString.
            nil
            ].
		nil]
)
public testSerializeDeserializeIDB = (
	| o o2 c l jso |
    o:: modelBasic.
    jso:: subject serializeTest: o.
    subject serializeDeserializeTest: (jso at: 'psoup') onResolved: [ :r | o2:: r.
    o2 reconstituteAliens: (jso at: 'aliens').
    assert: [ o2 slot1 printString = testDate printString ] message: 'Slot1 alien is not correct'.
    assert: [ o2 slot2 = 'bar' ] message: 'Slot2 is not correct'.
	nil ].
    
)
public testSerializeDeserializeIDBComplex = (
	| o o2 c jso |
    o:: modelComplex.
    jso:: subject serializeTest: o.
    subject serializeDeserializeTest: (jso at: 'psoup') onResolved: [ :o2 |
    o2 reconstituteAliens: (jso at: 'aliens').
    assert: [ o2 slot1 = 'complex' ] message: 'Slot1 is not correct'.
    c:: o2 slot2.
    assert: [ c isKindOfIDBObject ] message: 'Child object not deserialized'.
    assert: [ c slotA = 'foo1' ] message: 'Child slotA is not correct'.
    assert: [ c slotB printString = testDate printString ] message: 'Child slotB alien is not correct'.
    nil ].
)
public testSerializeDeserializeIDBList = (
	| o o2 c l jso |
    o:: modelList.
    jso:: subject serializeTest: o.
    subject serializeDeserializeTest: (jso at: 'psoup') onResolved: [ :o2 |
        o2 reconstituteAliens: (jso at: 'aliens').
        assert: [ o2 slot1 = 'list' ] message: 'Slot1 is not correct'.
        l:: o2 slot2.
        assert: [ l size = 2 ] message: 'List object not deserialized (wrong size)'.
        c:: l first.
        assert: [ c slotA = 'foo1' ] message: 'List Child1 slotA is not correct'.
        assert: [ c slotB printString = testDate printString ] message: 'Child1 slotB alien is not correct'.
        c:: l last.
        assert: [ c slotA printString = testDate printString ] message: 'List Child2 slotA is not correct'.
        assert: [ c slotB = 'bar2'  ] message: 'Child2 slotB is not correct'.
    	nil ].
)
public testAdd = (
	| m = modelBasic. |
    subject addTestObject: m onComplete: [ :uuid <String> |
    	[ deny: [ uuid = '' ]. 
    	assert: [ uuid = m uuid ] message: 'UUIDs do not agree'. 
        ] ensure: [ subject deleteTestObject: m ].
    	nil
    ]
)
public testPut = (
	| m = modelBasic. |
    subject addTestObject: m onComplete: [ :u <String> |
        m slot1: 'changed slot1'.
        subject putTestObject: m onComplete: [ :e <Alien[Event]> |
                | uuid <String> |
                  [uuid:: eventResult: e.
                  deny: [ uuid isNil]
                ] ensure: [ 'testPut: ensure: called' out. subject deleteTestObject: m ].
                nil
        ].
	nil
    ]
)
public testGet = (
	| m = modelBasic. |
	subject addTestObject: m onComplete: [ :e |
		[
		subject getTest: m onComplete: [ :r |
            assert: [ r isKindOfIDBObject ] message: 'Get failed'.
            assert: [ r slot1 printString = m slot1 printString ] message: 'Get failed slot1: ', r slot1 printString, ' does not equal ', subject basicModel slot1 printString.
        	nil ].
		] ensure: [ subject deleteTestObject: m ].
	nil ].
)
public testGetAll = (
	| items <List> = List new
    					add: modelBasic;
                        add: modelBasic;
                        add: modelBasic;
                        yourself. |
	subject addTestObjects: items onComplete: [ :addeditems |
        [
            subject getAllTest: [ :list <List[IDBObject]> |
                    assert: [ list size > 0 ] message: '0 results returned'.
                    (* assert: [ list size = items size ] message: 'Wrong number results returned'. *)
                    assert: [ list first isKindOfIDBObject ] message: 'Not an IDBObject'.
                    assert: [ list first slot1 printString = addeditems first slot1 printString ] message: 'Slot1 failed'.
                    nil.
            ] 
		] ensure: [ 
                addeditems do: [ :toBeDeleted <IDBObject> |
                    subject deleteTestObject: toBeDeleted ] ].
	nil ]
)
public testGetAllList = (
	| items <List> = List new
    					add: modelList;
                        add: modelList;
                        add: modelList;
                        yourself. |
    subject addTestObjects: items onComplete: [ :addeditems |
		[	
            subject getAllTest: [ :list <List[IDBObject]> |
                | m m2 sublist1 sublist2 listModel <IDBTestingModel> = subject listModel. | 
                    assert: [ list size > 0 ] message: '0 results returned'.
                    m: list first. m2: items first.
                    assert: [ m isKindOfIDBObject ] message: 'Not an IDBObject'.
                    assert: [ m2 slot1 printString = m slot1 printString ] message: 'getAll failed List slotA'.
                    sublist1: m slot2. sublist2: m2 slot2. 
                    assert: [ sublist1 size > 0 ] message: 'getAll failed List. List is empty'.
                    assert: [ sublist1 size = sublist2 size ] message: 'getAll listModel failed list sizes not eaqual'.
                    m: sublist1 first. m2: sublist2 first.
                    assert: [ m slotB printString = m2 slotB printString ] message: 'getAll List failed. child slotB'.
                    assert: [ m slotA = m2 slotA ] message: 'getAll List failed. child slotA'.
            ] 
		] ensure: [
                    addeditems do: [ :toBeDeleted <IDBObject> |
                        subject deleteTestObject: toBeDeleted ]
		].
		nil ].
)
public testGetKeys = (
	| items <List> = List new
    					add: modelBasic;
                        add: modelBasic;
                        add: modelBasic;
                        yourself. |
	subject addTestObjects: items onComplete: [ :addeditems |
        [
			subject getKeysTest: [ :keys <List[UUID]> |
    			assert: [ keys size > 0 ] message: 'Get keys returned 0 keys'.
                nil.
			]
		] ensure: [
                addeditems do: [ :toBeDeleted <IDBObject> |
                    subject deleteTestObject: toBeDeleted ]
		].
        nil ]
)
public testGetAllComplex = (
	| items <List> = List new
    					add: modelComplex;
                        add: modelComplex;
                        add: modelComplex;
                        yourself. |
    subject addTestObjects: items onComplete: [ :addeditems |
		[
       		subject getAllTest: [ :list <List[IDBObject]> |
                assert: [ list size = addeditems size ] message: '0 results returned'.
                assert: [ list first isKindOfIDBObject ] message: 'Not an IDBObject'.
                assert: [ addeditems first slot2 slotA = list first slot2 slotA ] message: 'getAll failed c2 slotA'.
                assert: [ addeditems first slot2 slotB printString = list first slot2 slotB printString ] message: 'getAll failed c2 slotB (alien date)'
            ]
		] ensure: [
        	addeditems do: [ :toBeDeleted <IDBObject> |
                        subject deleteTestObject: toBeDeleted ]
		].
		nil ].
)
) : (
TEST_CONTEXT = ()
)
public modelComplex =  (
    ^IDBTestingModel new slot1: 'complex'; slot2: modelChild1; yourself
)
public modelBasic =  (
	^IDBTestingModel new slot1: testDate; slot2: 'bar'; yourself.
)
public modelChild1 =  (
	^IDBTestingChildModel new slotA: 'foo1'; slotB: testDate; yourself.
)
public modelChild2 =  (
    ^IDBTestingChildModel new slotA: testDate; slotB: 'bar2'; yourself.
)
public modelList =  (
	| list = List new. |
    list add: modelChild1; add: modelChild2; yourself.
	^IDBTestingModel new slot1: 'list'; slot2: list; yourself
)
) : (
)
