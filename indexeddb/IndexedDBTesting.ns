Newspeak3
'Root'
public class IndexedDBTesting usingPlatform: p <Platform>
										minitest: minitest <Minitest>
                                        indexedDB: idb <IndexedDB>
(* :exemplar: IndexedDBTesting usingPlatform: platform
										minitest: (Minitest usingPlatform: platform)
                                        indexedDB: (IndexedDB usingPlatform: platform) *)
= (
	|
    private List = p collections List.
	private TestContext = minitest TestContext.
    public IDBSubject  = idb IDBSubject.
    public IDBObject = idb IDBObject.

    (* Not IDB specific *)
    private Serializer = p victoryFuel Serializer.
    private Deserializer = p victoryFuel Deserializer.
    private JSObject = p js global at: 'Object'.
    private JSArray = p js global at: 'Array'.
    private JSUint8Array = p js global at: 'Uint8Array'.
    private JSBlob = p js global at: 'Blob'.
    public victoryFuel = p victoryFuel.

    (* For clean up... *)
    public modelsToBeDeleted = List new.
	|
    'IndexedDBTesting factory called' out.
) (
public class IDBTestingSubject onModel: m <Object>
= IDBSubject onModel: m
						modelClasses: { IDBTestingModel. IDBTestingChildModel. }
                        databaseName: 'TestingDB'
                        databaseVersion: 1 (
	| 
   	addCallback
    deleteCallback
    putCallback
    getCallback
    getAllCallback
    public basicModel = modelBasic. 
    |
    startUp: [ :e | nil ].

	'IDBTestingSubject factory' out.
) (
public getKeys = (
	| r |
	getKeysFor: IDBTestingModel onComplete: [ :keys <List[String]> |
    	r: keys. nil
	].
    ^r
 )
public deleteTestObject: m <IDBTestingModel> = (
    deleteTestObject: m onComplete: [ :x | nil ].
)
public addTestObject: o <IDBObject> = (
   addTestObject: o onComplete: [ :x | nil ]
 )
public getKeys: c <Closure> = (
	getKeysFor: IDBTestingModel onComplete: [ :keys <List[String]> |
    	c value: keys.
        nil
	].
 )
public startUp: successHandler = (
	openDB: databaseVersion
    	onSuccess: [ :e <Alien[Event]> |
    	db:: (e at: 'target') at: 'result'.
        successHandler value: e.
        nil ]
        onFailure: [ :e | ].
)
onPut: e <Alien[Event]> = (
	'onPut triggered' out.
    putCallback value: e
)
public putTestObject: m onComplete: completionHandler <Closure> = (
	add: m.
    m slot2: 'changed value'.
    putCallback: completionHandler
	put: m
)
public addTestObject: m onComplete: completionHandler <Closure> = (
	addCallback: completionHandler.
	add: m
)
public deleteTestObject: m <IDBTestingModel> onComplete: completionHandler <Closure> = (
    add: m.
    deleteCallback: completionHandler.
	delete: m.
)
public get: completed = (
	getCallback: completed.
	get: basicModel uuid
    forClass: IDBTestingModel
)
public getAll: completionHandler <Closure> = (
	getAllCallback: completionHandler.
 	getAll: IDBTestingModel
 )
onGetKeys: e <Alien[Event]> = (
	getKeysCallback value: e
)
onGetAll: e <Alien[Event]>  = (
    getAllCallback value: e
)
onGet: e <Alien[Event]> = (
    getCallback value: e
)
onDelete: e <Alien[Event]> = (
    deleteCallback value: e
)
onAdd: e <Alien[Event]> = (
    addCallback value: e
)
) : (
)
public class IDBTestingModel = IDBObject (
	|
	public slot1
	public slot2
	|
) (
) : (
)
public class IDBTestingChildModel = (
	|
	public slotA
	public slotB
	|
) (
) : (
)
public class TestHarness = (
	| subject = IDBTestingSubject onModel: List new. |
    'TestHarness created' out.
) (
public class IDBTests = TestContext (
    'IDBTests test context' out.
) (
public cleanUp = (
	(* indexedDB deleteDatabase: 'List' *)
    [ modelsToBeDeleted size > 0 ] whileTrue: [ subject deleteTestObject: modelsToBeDeleted removeLast ]
)
public testGetKeys: successHandler <[:List[UUID]]>= (
	subject getKeys: successhandler
)
public testGetKeys = (
	subject getKeys: [ :keys <List[UUID]> |
    	assert: [ keys size > 0 ] message: 'Get keys returned 0 keys'.
	]
)
public testGet = (
	(*subject startUp: [ :e |*)
    	subject get: [ :r |
        	assert: [ r isKindOfIDBObject ] message: 'Get failed'.
            assert: [ r slot1 = subject basicModel slot1 ] message: 'Get failed slot1: ', r slot1 printString, ' does not equal ', subject basicModel slot1 printString.
        nil ].
	(*nil ]*)
)
eventResult: e = (
	^(e at: 'target') at: 'result'
)
public testAdd = (
    	subject addTestObject: m onComplete: [ :e <Alien[Event]> |
        	| uuid <String> |
            uuid:: eventResult: e.
        	deny: [ uuid isNil ].
            nil
        ]
)
public testDelete = (
	'Testing delete..' out.
	subject deleteTestObject: modelBasic onComplete: [ :e <Alien[Event]> |
        	| uuid <String> |
            uuid:: eventResult: e.
            deny: [ uuid isNil ].
            nil
            ]
)
public testPut = (
	'Testing put...' out.
	subject putTestObject: modelBasic onComplete: [ :e <Alien[Event]> |
        	| uuid <String> |
            uuid:: eventResult: e.
            deny: [ uuid isNil].
            nil
	]
)
public testGetAll = (
	subject getAll: [  :e <Alien[Event]> |
		| array <Array[IDBObject]> |
        array:: eventResult: e.
        pause.
		assert: [ array size > 0 ] message: '0 results returned'.
		assert: [ array first isKindOfIDBObject ] message: 'Not an IDBObject'.
 ]
)
) : (
TEST_CONTEXT = ()
)
public class VictoryFuelTests = TestContext (
) (
public xtestClosures = (
	|
    serializer <Serializer> = Serializer new.
    deserializer <Deserializer> = Deserializer new.
    m <IDBTestingModel> = IDBTestingModel new slot1: [ :a :b | ^a + b ]; slot2: 'buzz'; yourself.
	b <ByteArray>
    o <IDBTestingModel>
    |
	'Testing DS...' out.
    victoryFuel useAdditionalObjects: { IDBTestingModel. IDBTestingChildModel. }.
	b:: serializer serialize: m.
    o:: deserializer deserialize: b.
    assert: [ o slot1 = m slot1 ] message: 'Serialize/Deserialize failed slot1'.
    assert: [ o slot2 = m slot2 ] message: 'Serialize/Deserialize failed slot2'.
)
public testSerializeDeserializeComplex = (
	|
    serializer = Serializer withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.
    deserializer = Deserializer new.
    c1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 42; slotB: 'ninety'; yourself.
    c2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'c2'; slotB: 'xyz'; yourself.
    m1 <IDBTestingModel> = IDBTestingModel new
                                                                                slot1: c1;
    																			slot2: c2;
                                                                                yourself.
    m2 <IDBTestingModel>
    b <ByteArray>
    o <IDBTestingModel>
    |
	'Testing DS Complex...' out.
	b:: serializer serialize: m1.
    m2:: deserializer deserialize: b.
	assert: [ m2 slot1 slotA = m1 slot1 slotA ] message: 'Complex Serialize/Deserialize failed c1 slotA'.
	assert: [ m2 slot1 slotB = m1 slot1 slotB ] message: 'Complex Serialize/Deserialize failed c1 slotB'.
	assert: [ m2 slot2 slotA = m1 slot2 slotA ] message: 'Complex Serialize/Deserialize failed c2 slotA'.
	assert: [ m2 slot2 slotB = m1 slot2 slotB ] message: 'Complex Serialize/Deserialize failed c2 slotB'.
)
public testSerializeDeserializeArray = (
	|
    serializer <Serializer> = Serializer withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.
    deserializer <Deserializer> = Deserializer new.
    c1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 42; slotB: 'ninety'; yourself.
    c2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'c2'; slotB: 'xyz'; yourself.
    m1 <IDBTestingModel> = IDBTestingModel new
                                                                                slot1: '42';
    																			slot2: ((Array new: 2) at: 1 put: c1; at: 2 put: c2; yourself);
                                                                                yourself.
    m2 <IDBTestingModel>
    b <ByteArray>
    a1 <List>
    a2 <List>
    x1 <String>
    x2 <String>
    |
	'Testing DS Array...' out.
    b:: serializer serialize: m1.
    m2:: deserializer deserialize: b.
	assert: [ m2 slot1 = m1 slot1 ] message: 'List Serialize/Deserialize failed slot1'.

    a1:: m1 slot2. a2:: m2 slot2.
    x1:: a1 at: 1. x2:: a2 at: 1.
    assert: [ x1 slotA = x2 slotA ] message: 'Array failed Item 1 slotA: ', x1 slotA printString, ' is not equal to ', x2 slotA printString.
    assert: [ x1 slotB = x2 slotB ] message: 'Array failed Item 1 slotB: ', x1 slotB printString, ' is not equal to ', x2 slotB printString.
    x1:: a1 at: 2. x2:: a2 at: 2.
    assert: [ x1 slotA = x2 slotA ] message:  'Array failed Item 2 slotA: ', x1 slotA printString, ' is not equal to ', x2 slotA printString.
    assert: [ x1 slotB = x2 slotB ] message: 'Array failed Item 2 slotB: ', x1 slotB printString, ' is not equal to ', x2 slotB printString.
)
public testSerializeDeserializeList = (
	|
    serializer <Serializer> = Serializer withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.
    deserializer <Deserializer> = Deserializer new.
    c1 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 42; slotB: 'ninety'; yourself.
    c2 <IDBTestingChildModel> = IDBTestingChildModel new slotA: 'c2'; slotB: 'xyz'; yourself.
    m1 <IDBTestingModel> = IDBTestingModel new
                                                                                slot1: '42';
    																			slot2: (List new add: c1; add: c2; yourself);
                                                                                yourself.
    m2 <IDBTestingModel>
    b <ByteArray>
    a1 <List>
    a2 <List>
    c1p
    c2p
    |
	'Testing DS List...' out.
	subject startUp.
    b:: serializer serialize: m1.
	m2:: deserializer deserialize: b.
	assert: [ m2 slot1 = m1 slot1 ] message: 'List Serialize/Deserialize failed slot1'.

	a2:: m2 slot2. c1p:: a2 first. c2p:: a2 last.
	assert: [ c1 slotA = c1p slotA ] message: 'List Serialize/Deserialize failed Item 1 slotA'.
    assert: [ c1 slotB = c1p slotB ] message: 'List Serialize/Deserialize failed Item 1 slotB'.

	assert: [ c2 slotA = c2p slotA ] message: 'List Serialize/Deserialize failed Item 2 slotA'.
	assert: [ c2 slotB = c2p slotB ] message: 'List Serialize/Deserialize failed Item 2 slotB'.
)
public testSerializeDeserialize = (
	|
    serializer <Serializer> = Serializer new.  (* withAdditionalSharedObjects: { IDBTestingModel. IDBTestingChildModel. }.*)
    deserializer <Deserializer> = Deserializer new.
    m <IDBTestingModel> = IDBTestingModel new slot1: 'fizz'; slot2: 'buzz'; yourself.
	b <ByteArray>
    o <IDBTestingModel>
    |
	'Testing DS Closures...' out.
    (* victoryFuel useAdditionalObjects: { IDBTestingModel. IDBTestingChildModel. }. *)
	b:: serializer serialize: m.
    o:: deserializer deserialize: b.
    assert: [ o slot1 = m slot1 ] message: 'Serialize/Deserialize Closures failed slot1'.
    assert: [ o slot2 = m slot2 ] message: 'Serialize/Deserialize Closures failed slot2'.
)
) : (
TEST_CONTEXT = (
)
)
) : (
)
public modelChild2 =  (
    ^IDBTestingChildModel new slotA: 'foo2'; slotB: 'bar2'; yourself.
)
public modelChild1 =  (
	^IDBTestingChildModel new slotA: 'foo1'; slotB: 'bar1'; yourself.
)
public modelComplex =  (
    ^modelsToBeDeleted add: (IDBTestingModel new slot1: 'complex'; slot2: modelChild1; yourself).
)
public modelList =  (
	| list = List new. |
    list add: modelChild1; add: modelChild2; yourself.
	^modelsToBeDeleted add: (IDBTestingModel new slot1: 'list'; slot2: list; yourself).
)
public modelArray =  (
	| array = Array new: 2. |
    array at: 1 put: modelChild1; at: 2 put: modelChild2; yourself.
	^modelsToBeDeleted add: (IDBTestingModel new slot1: 'array'; slot2: array; yourself).
)
public modelBasic =  (
	| rslt = IDBTestingModel new slot1: 'foo'; slot2: 'bar'; yourself. |
	modelsToBeDeleted add: rslt.
    ^rslt
)
) : (
)
