Newspeak3
'Root'
public class IndexedDBTesting usingPlatform: p
										minitest: minitest
                                        indexedDB: idb
                                        subjectClass: subjectClass
(*
	:exemplar: [ :idb | IndexedDBTesting usingPlatform: platform
										minitest: (Minitest usingPlatform: platform)
                                        indexedDB: idb
                                        subjectClass: idb IDBSubject ] value: (IndexedDB usingPlatform: platform)
*)
= (
	|
	private TestContext = minitest TestContext.
    private List = p collections List.
    private IDBSubject = subjectClass.
    private IDBObject = idb IDBObject.

    indexedDB = idb.
	public subject = IDBTestingSubject onModel: List new.

    (* Mocks *)
    public testModel = IDBTestingModel new slot1: 'test1'; slot2: 'foo'; yourself.
    public testChildModel1 = IDBTestingChildModel new slotA: 'foo'; slotB: 'bar'; yourself.
    public testChildModel2 = IDBTestingChildModel new slotA: 'bar'; slotB: 'baz'; yourself.
	|
    subject openDB: 1
) (
public class IDBTestingSubject onModel: m = IDBSubject onModel: m modelClasses: { IDBTestingModel. IDBTestingChildModel. } (
) (
onGetAll: event <Alien[Event]>  = (
	'IDBTestingSubject onGetAll override' out.
	(* Override *)
)
public openDB: version <Integer> = (
	'IDBTestingSubject openDB override' out.
	(nil = db) ifTrue: [
    	'IDBTestingSubject openDB' out.
    	super openDB: version ]
)
onOpen: event <Alien[Event]> = (
	'IDBTestingSubject openDB' out.
	db:: (event at: #target) at: #result.
)
public addTestObject: completionHandler <Closure> = (
	| m = IDBTestingModel new slot1: 'add me'; slot2: 'added'; yourself.  |
	add: m
    		onComplete: [ :e <Alien[Event]> | completionHandler value: true. nil ]
            onError: [ :e <Alien[Event]> | completionHandler value: false. nil ].
)
public deleteTestObject: completionHandler <Closure> = (
	| m <IDBTestingModel> = IDBTestingModel new slot1: 'delete me'; slot2: 'deleted'; yourself. |
    add: m.
	delete: m
    			onComplete: [ :e <Alien[Event]> | completionHandler value: true. nil ]
                onError: [ :e <Alien[Event]> | completionHandler value: false. nil ].
)
public putTestObject: completionHandler <Closure> = (
	| m = IDBTestingModel new slot1: 'put me'; slot2: 'putted'; yourself. |
	add: m.
    m slot2: 'changed value'.
	put: m
    		onComplete: [ :ex <Alien[Event]> | completionHandler value: true. nil ]
            onError: [ :e  <Alien[Event]> | completionHandler value: false. nil ].
)
public getSharedObjects = (
	^sharedObjects
)
) : (
)
public class IDBTestingModel = IDBObject (
	|
	public slot1
	public slot2
	|
) (
) : (
)
public class IDBTests = TestContext (
) (
public cleanUp = (
	(* indexedDB deleteDatabase: 'List' *)
)
public testPut = (
	subject putTestObject: [ :r |
		assert: [ r ] message: 'Put failed' ]
)
public testAdd = (
    subject addTestObject: [ :r |
		assert: [ r ] message: 'Add failed' ].
)
public testDelete = (
	subject deleteTestObject: [ :r |
		assert: [ r ] message: 'Failed to delete' ].
)
) : (
TEST_CONTEXT = ()
)
public class IDBTestingChildModel = (
	|
	public slotA
	public slotB
	|
) (
) : (
)
) : (
)
