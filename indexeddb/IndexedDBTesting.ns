Newspeak3
'Root'
public class IndexedDBTesting usingPlatform: p <Platform>
										minitest: minitest <Minitest>
                                        indexedDB: idb <IndexedDB>
                                        subjectClass: subjectClass <Class[IDBSubject|IDBVFuelSubject]>
(*
	:exemplar: [ :idb | IndexedDBTesting usingPlatform: platform
										minitest: (Minitest usingPlatform: platform)
                                        indexedDB: idb
                                        subjectClass: idb IDBVFuelSubject ] value: (IndexedDB usingPlatform: platform)
*)
= (
	|
	private TestContext = minitest TestContext.
    private List = p collections List.
    public IDBSubjectClass  = subjectClass.
    public IDBObject = idb IDBObject.

	public testConfig = subjectClass name.
	|
) (
public class TestHarness = (
	|
	subject = IDBTestingSubject onModel: List new.
    
    (* Mocks *)
    testModel = IDBTestingModel new slot1: 'test1'; slot2: 'foo'; yourself.
    testChildModel1 = IDBTestingChildModel new slotA: 'foo'; slotB: 'bar'; yourself.
    testChildModel2 = IDBTestingChildModel new slotA: 'bar'; slotB: 'baz'; yourself.
    testComplexModel = IDBTestingModel new slot1: 'test1'; slot2: testChildModel1; yourself.
	|
    subject openDB: 1.
) (
public class IDBTestingSubject onModel: m = IDBSubjectClass onModel: m modelClasses: { IDBTestingModel. IDBTestingChildModel. } (
) (
onGetAll: event <Alien[Event]>  = (
	'IDBTestingSubject onGetAll override' out.
	(* Override *)
)
onOpen: event <Alien[Event]> = (
	'IDBTestingSubject openDB' out.
	db:: (event at: #target) at: #result.
)
public addTestObject: completionHandler <Closure> = (
	| m = IDBTestingModel new slot1: 'add me'; slot2: 'added'; yourself.  |
	add: m
    		onComplete: [ :e <Alien[Event]> | completionHandler value: true. nil ]
            onError: [ :e <Alien[Event]> | completionHandler value: false. nil ].
)
public deleteTestObject: completionHandler <Closure> = (
	| m <IDBTestingModel> = IDBTestingModel new slot1: 'delete me'; slot2: 'deleted'; yourself. |
    add: m.
	delete: m
    			onComplete: [ :e <Alien[Event]> | completionHandler value: true. nil ]
                onError: [ :e <Alien[Event]> | completionHandler value: false. nil ].
)
public putTestObject: completionHandler <Closure> = (
	| m = IDBTestingModel new slot1: 'put me'; slot2: 'putted'; yourself. |
	add: m.
    m slot2: 'changed value'.
	put: m
    		onComplete: [ :ex <Alien[Event]> | completionHandler value: true. nil ]
            onError: [ :e  <Alien[Event]> | completionHandler value: false. nil ].
)
public getSharedObjects = (
	^sharedObjects
)
public deserialize: bytes <ByteArray> usingClass: c <Class[IDBObject]>^<IDBObject> = (
	^super deserialize: bytes usingClass: c
)
public openDB: callback <Closure> = (
	super openDB: 1
)
public testDeserialize: bytes <ByteArray>^<IBObject> = (
	^deserializer deserialize: bytes
)
public testSerialize: o = (
	^serializer serialize: o
)
public serialize: o = (
	^super serialize: o
)
) : (
)
public class IDBTestingModel = IDBObject (
	|
	public slot1
	public slot2
	|
) (
) : (
)
public class IDBTests = TestContext (
) (
public cleanUp = (
	(* indexedDB deleteDatabase: 'List' *)
)
public testPut = (
	subject putTestObject: [ :r |
		assert: [ r ] message: 'Put failed' ]
)
public testDelete = (
	subject deleteTestObject: [ :r |
		assert: [ r ] message: 'Failed to delete' ].
)
public testAdd = (
    subject addTestObject: [ :r |
		assert: [ r ] message: 'Add failed' ].
)
public testSerializeDeserialize = (
	| s o |
    s:: subject testSerialize: testModel.
    o:: subject testDeserialize: s.
    assert: [ o slot1 = testModel slot1 ] message: 'Serialize/Deserialize failed slot1'.
    assert: [ o slot2 = testModel slot2 ] message: 'Serialize/Deserialize failed slot2'.
)
public testComplexSD = (
	| s o |
    s:: subject testSerialize: testComplexModel.
    o:: subject testDeserialize: s.
    assert: [ o slot1 = testComplexModel slot1 ] message: 'Complex Serialize/Deserialize failed slot1'.
    assert: [ o slot2 slotA = testComplexModel slot2 slotA ] message: 'Complex Serialize/Deserialize failed slot2'
)
) : (
TEST_CONTEXT = ()
)
public class IDBTestingChildModel = (
	|
	public slotA
	public slotB
	|
) (
) : (
)
) : (
)
) : (
)
