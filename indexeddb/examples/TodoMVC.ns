Newspeak3
'Root'
class TodoMVC usingPlatform: p <HopscotchPlatform> indexedDB: idb <IndexedDB> = (
(* :exemplar: TodoMVSPresenter usingPlatform: platform indexedDB: (IndexedDB usingPlatform: platform *)
  |
  (* imports *)
  private List = p collections List.
  private Presenter = p hopscotch Presenter.
  private Subject = p hopscotch Subject.
  
  private indexedDB = idb.
  private IDBSubject = idb IDBSubject.
  private IDBObject = idb IDBObject.
  |
) (
public class TodoItem named: s <String> = IDBObject (
|
	public description ::= s.
      public completed <Boolean> ::= false.
|
) (
public active ^ <Boolean> = (
  ^completed not
)
) : (
)
class TodoItemPresenter onSubject: s <TodoItemSubject> =  Presenter onSubject: s (
) (
description ^ <Fragment> = (
  ^subject inEditMode 
     ifFalse: [button: subject description action: [updateGUI: [subject edit]]]
     ifTrue: [| cm = codeMirror: subject description. |
	  cm acceptResponse: [:ed |
		updateGUI: [
			subject description: ed textBeingAccepted.
			ed leaveEditState.
			subject leaveEditMode.
		]
	   ].
	   cm
	]
)
public isKindOfTodoItemPresenter ^ <Boolean> = (
  ^true
)
isMyKind: p <Presenter> ^ <Boolean> = (
  ^p isKindOfTodoItemPresenter
)
completedCheckBox = (
  ^checkbox: 'Complete' 
        value: subject completed 
        action: [ :checked | updateGUI: [subject toggleState]].
)
deleteButton = (
	^button: 'Remove' action: [ updateGUI: [ subject delete ] ]
)
definition ^ <Fragment> = (
  ^row: {completedCheckBox. blank: 20. description. blank: 20. deleteButton. }
)
) : (
)
class TodoItemSubject onModel: ti <TodoItem> parent: p <Subject> = Subject onModel: ti (
  | public inEditMode <Boolean> ::= false. parent = p. |
) (
public active ^ <Boolean> = (
  ^model active
)
public completed ^ <Boolean> = (
  ^model completed
)
createPresenter ^ <TodoItemPresenter> = (
  ^TodoItemPresenter onSubject: self
)
public description ^ <String> = (
  ^model description
)
public edit = (
  inEditMode: true
)
public isKindOfTodoItemSubject ^ <Boolean> = (
  ^true
)
isMyKind: p <Presenter> ^ <Boolean> = (
  ^p isKindOfTodoItemSubject
)
public leaveEditMode = (
  inEditMode: false
)
public toggleState = (
  model completed
     ifTrue: [model completed: false]
     ifFalse: [model completed: true].
  parent put: model
)
public description: d <String> = (
  model description: d
  parent put: model
)
public delete = (
	parent delete: self
)
) : (
)
class TodoMVCPresenter onSubject: s <TodoMCSubject> = Presenter onSubject: s (
) (
clearCompleted ^ <Fragment> = (
  ^subject completedTodos size > 0 ifTrue: [
	button: 'Clear Completed' action: [updateGUI: [subject clearCompleted]]
	] ifFalse: [nothing]
)
definition ^ <Fragment> = (
  ^column: {
      header.
      newTodoInput.
      selectedTodos.
      row: {itemsLeft. filters. clearCompleted }
  }
)
header = (
  ^label: 'Todos'
)
public isKindOfTodoMVCPresenter ^ <Boolean> = (
  ^true
)
isMyKind: p <Presenter> ^ <Boolean> = (
  ^p isKindOfTodoMVCPresenter
)
itemsLeft ^ <Fragment> = (
  | 
  activeNumber = subject activeTodos size.
  items <String> = activeNumber  = 1 ifTrue: ['item'] ifFalse: ['items']. 
  |
 ^label: activeNumber printString, ' ', items, ' left'
)
newTodoInput ^ <Fragment> = (
  | cm = codeMirror: ''. |
  cm acceptResponse: [:ed |
	updateGUI: [
		subject addTodoNamed: ed textBeingAccepted.
		ed text: ''.
		ed leaveEditState.
		]
	].
  ^cm
)
selectedTodos = (
  (* Issue: creating new subjects each time destroys subject state *)
  ^column: (subject selectedTodos collect: [:ti <TodoItemSubject> |  ti presenter])
)
filters = (
  ^row: { 
               radioButton: 'All' 
                 value: subject filterState = #all
                 group: 'filter-todos'
                 action: [ :checked | updateGUI: [subject filterAll]
               ].
               mediumBlank.
               radioButton: 'Active' 
                 value: subject filterState = #active
                 group: 'filter-todos'
                 action: [ :checked | updateGUI: [subject filterActive].
               ].
               mediumBlank.               
               radioButton: 'Completed' 
                 value: subject filterState = #completed
                 group: 'filter-todos'
                 action: [ :checked | updateGUI: [subject filterCompleted].
               ]. 
               mediumBlank.    
   }
)
public refresh = (
	updateGUI: [ ]
)
public title = (
	^'Tada! List'
)
) : (
)
public class TodoMVCSubject onModel: l <List>
													idbObjectClasses: i <Array[Class[IBObjet]]> 
= IDBSubject onModel: l idbObjectClasses: i (
  | 
  public filterState <Symbol> ::= #all. 
  todoSubjects = todos collect: [:ti <TodoItem> | TodoItemSubject onModel: ti parent: self ]. 
  |
) (
public activeTodos ^ <List[TodoItemSubject]> = (
  ^todoSubjects select: [:ti | ti active]
)
public allTodos ^ <List[TodoItemSubject]> = (
  ^todoSubjects copyFrom: 1 to: todoSubjects size
)
public clearCompleted = (
  allTodos do: [:ti <TodoItemSubject> |  ti completed ifTrue: [
		todoSubjects remove: ti.
		todos remove: ti model
		]
	]
)
public completedTodos ^ <List[TodoItemSubject]> = (
  ^todoSubjects select: [:ti | ti completed]
)
createPresenter ^ <TodoMVCPresenter> = (
  ^TodoMVCPresenter onSubject: self
)
public filterActive = (
  filterState:: #active
)
public filterAll = (
  filterState:: #all
)
public filterCompleted = (
  filterState:: #completed
)
public isKindOfTodoMVCSubject ^ <Boolean> = (
  ^true
)
isMyKind: p <Presenter> ^ <Boolean> = (
  ^p isKindOfTodoMVCSubject
)
public selectedTodos ^ <List[TodoItemSubject]> = (
  filterState = #all ifTrue: [^allTodos].
  filterState = #active ifTrue: [^activeTodos].
  ^completedTodos
)
todos ^ <List[TodoItem]> = (
  ^model
)
public refresh = (
	updateGUI: [ ].
)
modelClasses = (
	^ { TodoItem. }
)
onGetAll: e = (
	| ts <List[TodoItem]> = super onGetAll: e. |
    ts do: [ :t | 
    	todos add: t. 
        todoSubjects add: (TodoItemSubject onModel: t parent: self) ].
    presenter refresh.
)
public delete: todoSubject <TodoItemSubject> = (
	| todo <TodoItem> = todoSubject model. |
	delete: todo
    	onComplete: [ :e | todos remove: todo. todoSubjects remove: todoSubject. presenter refresh. nil ]
        onError: [ :e | presenter showAlert: 'Failed to delete Todo: ', ((e at: 'error') at: 'message'). nil ]
)
public addTodoNamed: n <String> = (
  | newTodo = TodoItem named: n. |
	add: newTodo
		onComplete: [ :e | 
        	todos add: newTodo. 
            todoSubjects add: (TodoItemSubject onModel: newTodo parent: self).
            presenter refresh. 
            nil ]
		onError: [ :e | presenter showAlert: 'Failed to add new Todo'. nil ]
)
public put: todo <TodoItem> = (
	super put: todo
)
) : (
public new = (
  ^onModel: (List new) idbObjectClasses: { TodoItem }
)
)
) : (
)
