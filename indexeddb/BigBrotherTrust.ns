Newspeak3
'Root'
class BigBrotherTrust usingPlatform: platform indexedDB: idb = (
|
	private List = platform collections List.
    public JSObject = platform js global at: 'Object'.
    private Date = platform js global at: 'Date'.
    private Window = platform js global.
    private Color = platform graphics Color.
    private Gradient = platform hopscotch Gradient.
	private Presenter = platform hopscotch core Presenter.
    private Subject = platform hopscotch core Subject.

	private indexedDB = idb. (* IndexedDB usingPlatform: platform. *)
    private IDBObject = indexedDB IDBObject.
    private IDBSubject = platform hopscotch core Subject mixinApply: indexedDB IDBSubject.

    public version = 1.
	public transactions = List new.
|
) (
public class BankTransaction amount: a onDate: d <Integer> = IDBObject (
	|
    amt = a.
    txDate = d.
    |
) (
public txSubject = (
	^BankTransactionSubject onModel: self
)
public asJSObjectx = (| jso = JSObject new. |
	^jso
    	at: 'uuid' put: uuid;
        at: 'amt' put: amt;
        at: 'txDate' put: txDate;
        yourself.
)
public amount = (
			^amt
		)
public transactionDate = (
			^(Date new: txDate) toDateString
		)
) : (
)
class BankTransactionPresenter onSubject: s =  Presenter onSubject: s (
		) (
isMyKind: p <Presenter> ^ <Boolean> = (
		  ^p isKindOfBankTransactionPresenter
		)
isKindOfBankTransactionPresenter = (
			^true
		)
public definition ^ <Fragment> = (
			^row: {  label: subject transactionDate. blank: 100 . txLabel. txAmount. }
		)
txLabel = ( | txt = subject amount < 0 ifTrue: [ 'Withdrawal:' ] ifFalse: [ 'Deposit:' ]. |
	^column: { label: txt. }
)
txAmount = (
	^column: { label: subject amount }
)
) : (
)
public class BankTransactionSubject onModel: t <BankTransaction> = Subject onModel: t (
		) (
public createPresenter = (
			^BankTransactionPresenter onSubject: self
		)
public transactionDate = (
			^model transactionDate
		)
public amount = (
			^model amount
		)
isKindOfBankTransactionSubject = (
	^true
)
isMyKind: s = (
	^s isKindOfBankTransactionSubject
)
) : (
)
public class BankAccountSubject onModel: b <BigBrotherTrust> = IDBSubject onModel: b (
) (
withdrawals = (
		^txSubjets select: [ :t | t amount < 0 ]
	)
public createPresenter = (
		^BankAccountPresenter onSubject: self
	)
deposits = (
		^model transactions select: [ :t | t amount > 0 ]
	)
public balance = (
		^model balance
	)
public loadTx = (| tx nocors |
	nocors: (js global at: 'Object') new.
    nocors at: 'mode' put: 'no-cors'.
	tx:: (js global fetch: 'http://localhost:8077/transactions' with: nocors)
    		then: [ :r | r json then: [ :data | data ] ].
    ^tx
)
public deposit: amt = (
	transact: amt.
)
onUpgradeNeeded: event = (
    | o = JSObject new. |
    super onUpgradeNeeded: event.
	o  at: 'keyPath' put: 'uuid'.
   db createObjectStore: 'BankTransaction' with: o.
)
onSuccess: event = (
	| o r tx store req |
	super onSuccess: event.
    (* db getAll. *)
    tx:: db transaction: 'BankTransaction' for: 'readonly'.
    tx addEventListener: 'complete' handler: [ :e | onTxComplete: e. nil ].
    store:: tx objectStore: 'BankTransaction'.
    req: store getAll.
    req addEventListener: 'success' handler: [ :e | onGetAllSuccess: e. nil ].
)
public transactionSubjects = (
	'transactionSubjects called' out.
	^transactions collect: [ :t | BankTransactionSubject onModel: t ]
)
transact: amt = (| b s d |
		d:: Date now.
		b:: BankTransaction amount: amt onDate: d.
        add: b.
		model transact: b.
)
public withdraw: amt = (
	balance < amt ifTrue: [ ^Window alert: 'Insufficient funds available' ].
	transact: (amt * -1).
)
onGetAllSuccess: event <Alien> = (
	| r = (event at: #target) at: #result. |
    1 to: (r at: #length) do: [ :i | | b a d o |
    	o:: r at: (i - 1).
    	a:: o at: 'amt'.
        d:: (o at: 'txDate').
        b:: BankTransaction amount: a onDate: d.
        transactions add: b.
     ].
     presenter refresh.
    'onGetAllSuccess completed' out.
)
) : (
)
class BankAccountPresenter onSubject: s <BankAccountSubject> = Presenter onSubject: s (|
	stFlag = false.
|) (
isKindOfBankAccountPresenter = (
			^true
		)
isMyKind: p <Presenter> ^ <Boolean> = (
		  ^p isKindOfBankAccountPresenter
		)
transactionList = (
			^column:  transactionPresenters.
		)
computeDigits: ds = (
| s ::= 0. |
	ds do: [:d | s:: (10 * s) + (d - 48)].
	^s
)
newDepositInput ^ <Fragment> = (
  | cm = codeMirror: ''. |
  cm acceptResponse: [:ed |
	updateGUI: [
		subject deposit: (computeDigits: ed textBeingAccepted).
		ed text: ''.
		ed leaveEditState.
		]
	].
  ^cm
)
newWithdrawalInput ^ <Fragment> = (
  | cm = codeMirror: ''. |
  cm acceptResponse: [:ed |
	updateGUI: [
		subject withdraw: (computeDigits: ed textBeingAccepted).
		ed text: ''.
		ed leaveEditState.
		]
	].
  ^cm
)
minorHeadingColor = (
	^Gradient from: Color gray to: Color white.
)
loadTx = (
	^subject loadTx
)
transactionsHeader = ( | l = label: 'Transactions'. |
	^row: { l }.
)
minorHeadingBlock: body = (
	^(padded: body with: {50. 25. 25. 25.})
	color: minorHeadingColor.
)
majorHeadingBlock: body = (
	^(padded: body with: {50. 25. 25. 25.}) color: majorHeadingColor.
)
logo = (| b = label: 'Big Brother Trust'. |
	b visual at: 'style' put: 'font-family: sans-serif; font-size: 200%; text-align: center'.
	^row: { b }
)
header = ( | l = label: 'Your Money'. |
	l visual at: 'style' put: 'font-size: 200%'.
		^row: {  l. }
		)
logoBlock: body = (
	^(padded: body with: { 100. 75. 100. 75. }) color: logoColor.
)
currentBalance ^<Fragment> = (| l = label: 'Balance: $'. b = label: subject balance. |
	l visual at: 'style' put: 'font-family: sans-serif; font-size: 150%; text-align: center'.
	b visual at: 'style' put: 'font-family: sans-serif; font-size: 150%; text-align: center'.
			^row: { l. blank: 20. b }
		)
logoColor = (
	^Color white
)
majorHeadingColor = (
	^Color gray.
)
transactionPresenters = (
	'transactionPresenters called' out.
	^subject transactionSubjects collect: [ :s | s presenter ]
)
public refresh = (
	updateGUI: [ ].
)
public definition ^<Fragment> = (
	^column: {
    	logoBlock: logo.
		majorHeadingBlock: header.
		minorHeadingBlock: currentBalance.
		transactionsHeader.
		transactionList.
		row: { label: 'Deposit:' }.
        row: { newDepositInput. }.
		row: { label: 'Withdrawal:' }.
		row: { newWithdrawalInput. }.
    }
)
) : (
)
public transact: b <BankTransaction> = (
	^transactions add: b
)
public balance = (
		^transactions inject: 0 into: [ :s :t | s + t amount ].
	)
) : (
)
