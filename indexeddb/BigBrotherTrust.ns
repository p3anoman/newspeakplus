Newspeak3
'Root'
class BigBrotherTrust usingPlatform: platform indexedDB: idb = (
|
	private List = platform collections List.
    public JSObject = platform js global at: 'Object'.
    private Date = platform js global at: 'Date'.
    private Window = platform js global.
    private crypto = platform js global at: 'crypto'.
    private Color = platform graphics Color.
    private Gradient = platform hopscotch Gradient.
	private Presenter = platform hopscotch core Presenter.
    private Subject = platform hopscotch core Subject.

	private indexedDB = idb. (* IndexedDB usingPlatform: platform. *)
    private IDBObject = indexedDB IDBObject.
    private IDBSubject = platform hopscotch core Subject mixinApply: indexedDB IDBSubject.

    public version = 1.
	public transactions = List new.
|
) (
public class BankTransaction id: uuid <UUID> amount: a <Number> onDate: d <Integer> = IDBObject uuid: uuid (
	|
    amt = a.
    txDate = d.
    |
) (
public amount = (
			^amt
		)
public transactionDate = (
			^(Date new: txDate) toDateString
		)
) : (
public new: array = (
	^self id: (array at: 0) amount: (array at: 1) onDate: (array at: 2)
)
)
class BankTransactionPresenter onSubject: s =  Presenter onSubject: s (
		) (
isMyKind: p <Presenter> ^ <Boolean> = (
		  ^p isKindOfBankTransactionPresenter
		)
isKindOfBankTransactionPresenter = (
			^true
		)
public definition ^ <Fragment> = (
	^transactionBlock: transactionRow
)
dateColumn= (| lbl = label: subject transactionDate. |
	lbl visual at: 'style' put: style.
	^column: { lbl }
)
typeColumn = ( | lbl = label: subject transactionType. |
	lbl visual at: 'style' put: style.
	^column: { lbl. }
)
style = (
	^'font-family: sans-serif; font-size: 110%; color: slateGray'
)
amountColumn = (| lbl = label: subject amount. |
	lbl visual at: 'style' put: style, 'text-align: right'.
	^column: { lbl }
)
transactionRow = (
	^row: {  
			dateColumn.
            blank: 100.
            typeColumn.
            blank: 100.
            amountColumn.
            blank: 200.
            editButton.
            deleteButton.
	}
)
deleteButton = (
	^button: 'Delete' action: [ updateGUI: [ subject delete ] ]
)
editButton = (
	^button: 'Edit' action: [ updateGUI: [ subject edit ] ]
)
transactionBlock: row = (
	^(padded: row with: { 10. 10. 10. 10. }) color: (Color r: 0.99 g: 0.99 b: 0.99 a: 1).
)
) : (
)
public class BankTransactionSubject onModel: t <BankTransaction> = Subject onModel: t (
		) (
public createPresenter = (
			^BankTransactionPresenter onSubject: self
		)
isKindOfBankTransactionSubject = (
	^true
)
isMyKind: s = (
	^s isKindOfBankTransactionSubject
)
public amount = (
			^model amount
		)
public transactionDate = (
 ^model transactionDate
)
public transactionType = (
	^amount < 0 ifTrue: [ 'Withdrawal:' ] ifFalse: [ 'Deposit:' ]
)
public delete = (
	delete: model
)
public edit = (
	presenter enterPresenter: (BankTransactionEditPresenter onSubject: self)
)
) : (
)
public class BankAccountSubject onModel: b <BigBrotherTrust> = IDBSubject onModel: b (
) (
withdrawals = (
		^txSubjets select: [ :t | t amount < 0 ]
	)
public createPresenter = (
		^BankAccountPresenter onSubject: self
	)
deposits = (
		^model transactions select: [ :t | t amount > 0 ]
	)
public balance = (
		^model balance
	)
public deposit: amt = (
	transact: amt.
)
public withdraw: amt = (
	balance < amt ifTrue: [ ^Window alert: 'Insufficient funds available' ].
	transact: (amt * -1).
)
modelClasses = (
	^{ BankTransaction. }
)
onGetAllSuccess: event <Alien> = (
	| tx = super onGetAllSuccess: event. |
    tx do: [ :t | transactions add: t ].
    presenter refresh.
	(* | r = (event at: #target) at: #result. src = (event at: #target) at: 'source'. |
    ('GetAll source: ', (src at: 'name')) out.
    1 to: (r at: #length) do: [ :i | | b a d o |
    	o:: r at: (i - 1).
    	a:: o at: 'amt'.
        d:: (o at: 'txDate').
        b:: BankTransaction amount: a onDate: d.
        transactions add: b.
     ].
     presenter refresh. *)
    'onGetAllSuccess completed' out.
)
transact: amt = (| b s d |
		d:: Date now.
		b:: BankTransaction id: crypto randomUUID amount: amt onDate: d.
        add: b.
		model transact: b.
)
public transactionSubjects = (
	^transactions collect: [ :t | BankTransactionSubject onModel: t ]
)
) : (
)
class BankAccountPresenter onSubject: s <BankAccountSubject> = Presenter onSubject: s (|
	stFlag = false.
|) (
isKindOfBankAccountPresenter = (
			^true
		)
isMyKind: p <Presenter> ^ <Boolean> = (
		  ^p isKindOfBankAccountPresenter
		)
transactionList = (
			^column:  transactionPresenters.
		)
computeDigits: ds = (
| s ::= 0. |
	ds do: [:d | s:: (10 * s) + (d - 48)].
	^s
)
newDepositInput ^ <Fragment> = (
  | cm = codeMirror: ''. |
  cm acceptResponse: [:ed |
	updateGUI: [
		subject deposit: (computeDigits: ed textBeingAccepted).
		ed text: ''.
		ed leaveEditState.
		]
	].
  ^cm
)
newWithdrawalInput ^ <Fragment> = (
  | cm = codeMirror: ''. |
  cm acceptResponse: [:ed |
	updateGUI: [
		subject withdraw: (computeDigits: ed textBeingAccepted).
		ed text: ''.
		ed leaveEditState.
		]
	].
  ^cm
)
loadTx = (
	^subject loadTx
)
minorHeadingBlock: body = (
	^(padded: body with: {50. 25. 25. 25.})
	color: minorHeadingColor.
)
majorHeadingBlock: body = (
	^(padded: body with: {50. 25. 25. 25.}) color: majorHeadingColor.
)
logo = (| b = label: 'Big Brother Trust'. |
	b visual at: 'style' put: 'font-family: sans-serif; font-size: 200%; text-align: center'.
	^row: { b }
)
header = ( | l = label: 'Your Money'. |
	l visual at: 'style' put: 'font-size: 200%'.
		^row: {  l. }
		)
logoBlock: body = (
	^(padded: body with: { 100. 75. 100. 75. }) color: logoColor.
)
currentBalance ^<Fragment> = (| l = label: 'Balance: $'. b = label: subject balance. |
	l visual at: 'style' put: 'font-family: sans-serif; font-size: 150%; text-align: center'.
	b visual at: 'style' put: 'font-family: sans-serif; font-size: 150%; text-align: center'.
			^row: { l. blank: 20. b }
		)
logoColor = (
	^Color white
)
public refresh = (
	updateGUI: [ ].
)
transactionsHeader = ( | l = label: 'Transactions'. |
	l visual at: #style put: styleLabel.
	^row: { l }.
)
depositLabel = (| lbl = label: 'Deposit:'. |
	lbl visual at: #style put: styleLabel.
    ^lbl
)
labelDeposit = (| lbl = label: 'Deposit:'. |
	lbl visual at: #style put: labelStyle.
    ^lbl
)
labelWithdrawal = (| lbl =  label: 'Withdrawal:'. |
	lbl visual at: #style put: labelStyle.
    ^lbl
)
labelStyle = (
	^ 'font-family: sans-serif; fonsize: 125%; color: green'
)
labelTransactions = ( | lbl = label: 'Transactions'. |
	lbl visual at: #style put: labelStyle.
	^ lbl
)
minorHeadingColor = (
	^Color r: 0.8 g: 0.8 b: 0.8 a: 1.
)
public definition ^<Fragment> = (
	^column: {
    	logoBlock: logo.
		majorHeadingBlock: header.
		minorHeadingBlock: currentBalance.
        row: {}.
		row: { labelTransactions }.
		transactionList.
		row: { labelDeposit }.
        row: { newDepositInput. }.
		row: { labelWithdrawal }.
		row: { newWithdrawalInput. }.
    }
)
transactionPresenters = (
	^subject transactionSubjects collect: [ :s | s presenter ]
)
majorHeadingColor = (
	^Color r: 0.5 g: 0.5 b: 0.5 a: 1
)
) : (
)
class BankTransactionEditPresenter onSubject: s = Presenter onSubject: s (
) (
) : (
isMyKind: p = (
	^ p isKindOfBankTransactionEditPresenter
)
isKindOfBankTransactionEditPresenter = (
	^true
)
definition = (
	^column: {
    	row: { dateEdit }.
    	row: { amtEdit }.
        row: {
        	saveButton.
            canxButton.
        }.
    }
)
dateEdit = (
)
amtEdit = (
)
saveButton = (
)
canxButton = (
)
)
public transact: b <BankTransaction> = (
	^transactions add: b
)
public balance = (
		^transactions inject: 0 into: [ :s :t | s + t amount ].
	)
) : (
)
