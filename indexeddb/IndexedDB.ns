Newspeak3
'Root'
public class IndexedDB usingPlatform: platform = (
	|
		(*
        	Implements the browser API of the same name.
			IDBSubject is meant to be used as a mixin on your application subject. Some methods need to be overriden in the current incarnation.
			Model classes need to subclass IDBObject giving them the uuid slot and and the asJSObject method.
        	Implement the modelClasses method in your Subject/Top level class. An IDBObjectStore will be created for each class.
    	*)
    public List = platform collections List.
    private ObjectMirror = platform mirrors ObjectMirror.
    private ClassMirror = platform mirrors ClassMirror.
	private JSObject = platform js global at: 'Object'.
    
    (* The browser's IndexedDB API object *)
    private indexedDB <Alien> = platform js global at: 'indexedDB'.
	|
) (
public class IDBObject uuid: id = (
	|
	uuid = id.
	|
) (
public asJSObject = (
	|
    m = ObjectMirror reflecting: self.
    cm = m getClass.
    o = JSObject new.
    |
	cm slots do: [ :slot | | n v |
    	n: slot name.
        v:: m getSlot: n.
        o at: n put: v reflectee
    ].
	^o
)
) : (
public new: array = (
	^subclassResponsibility
)
)
public class IDBSubject = (
(*
	This class is to be used as a mixin whose many event handlers can be overriden by your application subject.
	Override onUpgradeNeeded to create the objectStores needed to store your model objects.
    Overrided onSuccess to load data?
    Currently, stores use the class name of the objects to be stored using IDBSubject's add: put: and delete: methods. Custom behavior would require overriding these.
*)
 |
 (* The connection to the application's database *)
 db <Alien>
 |
) (
onAddSuccess: event <Alien> = (
	'Add succeeded' out.
)
get: aUUID = (
)
getAll = (
)
modelClasses = (
	^subclassResponsibility
)
public openDB: version <Integer> = (
	|
    cm = (ObjectMirror reflecting: model) getClass.
	request	= indexedDB open: cm mixin name version: version.
    |
    request addEventListener: 'upgradeneeded' with: [ :e | onUpgradeNeeded: e. nil ].
    request addEventListener: 'blocked' with: [ :e | onBlocked: e. nil ].
    request addEventListener: 'success' with: [ :e | onOpenSuccess: e. nil ].
    request addEventListener: 'error' with: [ :e | (e at: #error) out. nil ].
	'IDBSubject openDB called' out.
)
onBlocked: e = (
	'Blocked triggered' out.
)
onTxComplete: event <Alien> = (
	'Transaction complete triggered' out.
)
onTxError: e <Alien> = (
	'Transaction error triggered' out.
)
public openDB = (
	openDB: model version.
)
onUpgradeNeeded: event <Alien> = (| o = JSObject new. |
    db::  (event at: #target) at: #result.
	o  at: 'keyPath' put: 'uuid'.
   	modelClasses do: [ :m | | cm = ClassMirror reflecting: m. |
		db createObjectStore: cm mixin name with: o.
    ].
    'upgradeneeded triggered' out.
)
onOpenSuccess: event <Alien> = (
	'Open DB succeeded' out.
    db:: (event at: #target) at: #result.
    modelClasses do: [ :m |
		| tx store req cm = ClassMirror reflecting: m. |
    	tx:: db transaction: cm mixin name for: 'readonly'.
   		tx addEventListener: 'complete' handler: [ :e | onTxComplete: e. nil ].
    	store:: tx objectStore: cm mixin name.
    	req: store getAll.
    	req addEventListener: 'success' handler: [ :e | onGetAllSuccess: e. nil ].
    ].
)
onGetAllSuccess: event <Alien> = (
	|
    tgt = event at: #target.
    r = tgt at: #result.
    src = (tgt at: 'source') at: 'name'.
    modelClass
    rslt = List new.
    |
    modelClass:: modelClasses detect: [ :cls | cls name = src ] ifNone: [ nil ].
    modelClass isNil ifTrue: [ 'model class not found' out. ^self ].
    1 to: (r at: #length) do: [ :i | | m o |
    	o:: r at: (i - 1).
        m:: modelClass new: (JSObject values: o).
        rslt add: m.
     ].
     ^rslt
)
add: o = (
	|
    m = ObjectMirror reflecting: o.
	s = m getClass mixin name.
    tx
    store
    req
    |
    (* Create the UUID key for the model
    m setSlot: 'uuid' to: crypto randomUUID. *)

    (* Create the IDBTransaction *)
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: [ :e | onTxComplete: e. nil ].
    tx addEventListener: 'error' handler: [ :e | onTxError: e. nil ].

    (* Get the IDBObjectStore from the transaction *)
    store:: tx objectStore: s.

    (* Store the model object *)
    req:: store add: o asJSObject.
    req addEventListener: 'success' handler: [ :e | self onAddSuccess: e. nil ]
)
add: o onComplete: completeHandler onError: errorBlock = (
	|
    m = ObjectMirror reflecting: o.
	s = m getClass mixin name.
    tx
    store
    req
    |
    (* Create the UUID key for the model
    m setSlot: 'uuid' to: crypto randomUUID. *)

    (* Create the IDBTransaction *)
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: completeBlock. (* [ :e | onTxComplete: e. nil ]. *)
    tx addEventListener: 'error' handler: errorBlock. (* [ :e | onTxError: e. nil ]. *)

    (* Get the IDBObjectStore from the transaction *)
    store:: tx objectStore: s.

    (* Store the model object *)
    req:: store add: o asJSObject.
    req addEventListener: 'success' handler: [ :e | self onAddSuccess: e. nil ]
)
put: o <IDBObject> onComplete: completeBlock onError: errorBlock = (
	|
	s = (ObjectMirror reflecting: o) getClass mixin name.
    tx
    store
    |
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: completeBlock. (*  [ :e | onTxComplete: e. nil ]. *)
    tx addEventListener: 'error' handler: errorBlock. (* [ :e | onTxError: e. nil ]. *)
    store:: tx objectStore: s.
    store put: o asJSObject.
)
delete: o = (
	delete: o onComplete: [ :e | onTxComplete: e. nil ] onError: [ :e | onTxError: e. nil ].
)
delete: o onComplete: completeBlock onError: errorBlock = (
	|
	s = (ObjectMirror reflecting: o) getClass mixin name.
    tx
    store
    |
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: completeBlock. (* [ :e | onTxComplete: e. nil ] *)
    tx addEventListener: 'error' handler: errorBlock. (* [ :e | onTxError: e. nil ]. *)
    store:: tx objectStore: s.
    store delete: o uuid.
)
put: o <IDBObject> = (
	put: o onComplete: [ :e | onTxComplete: e. nil ] onError: [ :e | onTxError: e. nil ].
)
) : (
)
) : (
)
