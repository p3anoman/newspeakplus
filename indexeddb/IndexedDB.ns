Newspeak3
'Root'
public class IndexedDB usingPlatform: p = (
	|
		(* :exemplar: IndexedDB usingPlatform: platform *)
        (*
        	Implements the browser API of the same name.
			Copyright 2024 John McKeon.
            MIT License. Use at your own risk.
    	*)
    private List <List> = p collections List.
    private ObjectMirror <ObjectMirror> = p mirrors ObjectMirror.
    private ClassMirror <ClassMirror> = p mirrors ClassMirror.
	public Subject <Subject> = p hopscotch Subject.
	private Serializer <Serializer> = p victoryFuel Serializer.
	private Deserializer <Deserializer> = p victoryFuel Deserializer.
    private ByteArray <ByteArray> = p victoryFuel ByteArray.

    private crypto <Alien[Crypto]> = p js global at: 'crypto'.
    private JSPromise <Alien[Promise]> = p js global at: 'Promise'.
	private JSObject <Alien[Object]> = p js global at: 'Object'.
    private JSArray <Alien[Array]> = p js global at: 'Array'.
    private JSUint8Array <Alien[Uint8Array]> = p js global at: 'Uint8Array'.
    private JSBlob <Alien[Blob]> = p js global at: 'Blob'.
    private JSFileReader <Alien[FileReader]> = p js global at: 'FileReader'.
    
    (* The browser's IndexedDB API object *)
    private indexedDB <Alien[IndexedDB]> = p js global at: 'indexedDB'.
    private fileReader <Alien[FileReader]> = JSFileReader new.
	|
) (
public class IDBObject new = (
	| public uuid = crypto randomUUID. |
) (
public isKindOfIDBObject = (
	^true
)
) : (
)
public class IDBSubject onModel: m <Object>
										modelClasses: mc <Array[Class[IDBObject]]>
                                        databaseName: n <String>
                                        databaseVersion: v <Integer>
(* :exemplar_1: [
	| 
    Klass = ClassDeclarationBuilder fromSource: 'public class ApplicationModel = (| public version ::= 1. |)()'.
    ModelKlass = ClassDeclarationBuilder fromSource: 'class IDBObjectClass = (| public slot1 ::= 'dummy'. public slot2 ::= 'foo'. |)()'.
    |
    Klass install.
    ModelKlass install.
	IDBSubject onModel: ApplicationModel new modelClasses: { IDBObjectClass } databaseName: 'TestDB' databaseVersion: 1984 ] value
*)
= Subject onModel: m (
	|
 	(* The connection to the application's database *)
 	public db <Alien[IDBDatabase]>
 	public modelClasses <Array> = mc.
    public databaseName = n.
    public databaseVersion = v.
	|
) (
put: o <IDBObject> = (
	put: o onComplete: [ :e | ] onError: [ :e | ]
)
onAdd: event  <Alien[Event]> = (
	(* 'Success' out. *)
)
public openDB = (
	openDB: databaseVersion.
)
serialize: anObject <IDBObject>^<Alien[Object]> = (
	|
    serializer <Serializer> = Serializer withAdditionalSharedObjects: modelClasses.
    bytes <ByteArray> = serializer serialize: anObject.
    blob <Alien[Blob]> = blobFromBytes: bytes.
    |
	^blob
)
deserialize: buffer <Alien[ArrayBuffer]>^<IDBObject> = (
		|
        deserializer <Deserializer> = Deserializer withAdditionalSharedObjects: modelClasses. 
        ui8 <Alien[Uint8Array]> = JSUint8Array new: buffer.
        n <Integer> = ui8 at: 'length'.
        bytes <ByteArray> = ByteArray new: n.
        |
        (* pause. *)
        1 to: n do: [ :i <Integer> | bytes at: i put: (ui8 at: (i - 1)) ].
        ^deserializer deserialize: bytes.
)
onOpen: event <Alien[Event]> = (
	'onOpen DB called' out.
    db:: (event at: #target) at: #result.
    getAll: modelClasses first.
    (* 
    modelClasses do: [ :m |
        	getAll: m
            onSuccess: [ :r <List[IDBObject]> | onGetAll: r. nil ]
            onFailure: [ :err | 'Failed to get all' out. nil ].
    ].
    *)
)
getAll: class <Class[IDBObject]> onComplete: completionHandler <[:List[IDBObject]]> onError: errorHandler <[:Error]> = (
		|
        storeName <String> = class name.
        tx <Alien[IDBTransaction]>
        store <Alien[IDBObjectStore]>
        req <Alien[IDBOpenRequest]>
        |
    	tx:: db transaction: storeName for: 'readonly'.
    	store:: tx objectStore: storeName.
    	req: store getAll.
    	req addEventListener: 'success' handler: [ :e <Alien[Event]> |
        	|
            blobs <JSArray[Alien[Object]]> = (e at: 'target') at: 'result'.
            n <Integer> = blobs at: 'length'.
            promises <JSArray[Alien[Promise]]> = JSArray new: n.
            results <List[IDBObject]> = List new.
            |
    		0 to: (n - 1) do: [ :i <Integer> | | blob = blobs at: i. | promises at: i put: blob arrayBuffer  ].
			(JSPromise all: promises) then: [ :buffers <JSArray[Alien[ArrayBuffer]]> |
            	0 to: (n - 1) do: [ :j <Integer> | | buffer <Alien[ArrayBuffer]> = buffers at: j. | results add: (deserialize: buffer) ].
            	onGetAll: results.
                nil
            ] onError: [ :ex <Error> | signal: ('Failed to load data: ', ex printString). nil ].
			nil.
		].
   		tx addEventListener: 'complete' handler: [ :e <Alien[Event]> | completionHandler value: e. nil ].
   		tx addEventListener: 'error' handler: [ :e <Alien[Event]> | errorHandler value: e. nil ].
)
onGetAll: r <List[IDBObject]> = (
	'onGetAll triggered' out.
)
onPut: event  <Alien[Event]> = (
	'onPut triggered' out.
)
getKeys: class <Class[IDBObject]> onComplete: completionHandler <[:Alien[Event]]> onError: errorHandler <[:Alien[Event]]>= (
		|
        storeName <String> = (ClassMirror reflecting: class) mixin name.
        tx <Alien[IDBTransaction]>
        store <Alien[IDBObjectStore]>
        req <Alien[IDBRequeste]>
        r <List[String]> = List new.
        |
    	tx:: db transaction: storeName for: 'readonly'.
    	store:: tx objectStore: storeName.
    	req:: store getAllKeys.
    	req addEventListener: 'success' handler: [ :e <Event> |
			| a <Alien[Array[String]]> = (e at: 'target') at: 'result'. |
      		1 to: (a at: 'length') do: [ :i <Integer> | r add: (a at: (i - 1)) ].
        	onGetKeys: r for: k.
            nil
        ].
   		tx addEventListener: 'complete' handler: [ :e <Alien[Event]> | completionHandler value: e. nil ].
   		tx addEventListener: 'error' handler: [ :e <Alien[Event]> | errorHandler value: e. nil ].
)
onGet: o <IDBObject> = (
	'onGet triggered' out. 
)
blobFromBytes: bytes = (
	|
    ui8 <Alien[Uint8Array]> = JSUint8Array new: bytes size.
    blobParts <Alien[Array]> = JSArray new.
	options <Alien[Object]> = JSObject new.
    |
	1 to: bytes size do: [ :i | ui8 at: (i - 1) put: (bytes at: i) ]. 
    blobParts at: 0 put: ui8.
    options at: 'type' put: 'application/octet-stream'.
	^JSBlob new: blobParts with: options.
)
onDelete: o <IDBObject> = (
	'onDelete triggered' out.
)
onGetKeys: keys = (
	'onGetKeys: triggered' out.
)
add: o <IDBObject> = (
	add: o onComplete: [ :e | nil ] onError: [ :e | nil ]
)
delete: o <IDBObject> = (
	delete: o onComplete: [ :e | nil ] onError: [ :e | nil ]
)
get: uuid <UUID|String> forClass: class <Class[IDBObject]> = (
	get: uuid forClass: class onComplete: [ :e | nil ] onError: [ :e | nil ]
)
getAll: class <Class[IDBObject]>  = (
	getAll: class onComplete: [ :e | nil ] onError: [ :e | nil ]
)
getKeys: class <Class[IDBObject]> = (
	getKeys: class onComplete: [ :e | nil ] onError: [ :e | nil ]
)
onUpgradeNeeded: event <Alien[Event]> = (
	(* The default handler for the 'upgradeneeded' event generated on version change. *)
    (* This default 'Version 1' creates the required IDBObjectStores for the FIRST class in the modelClasses array *)
    db::  (event at: #target) at: #result.
	db createObjectStore: modelClasses first name.
    'upgradeneeded triggered' out.
)
put: o <IDBObject> onComplete: completeBlock onError: errorBlock = (
	|
    storeName <String> =  (ObjectMirror reflecting: o) getClass mixin name.
    tx <Alien[IDBTransaction]>
    store <Alien[IDBObjectStore]>
    req <Alien[IDBRequest]>
    |
	tx:: db transaction: storeName for: 'readwrite'.
    store:: tx objectStore: storeName.
    req:: store put: (serialize: o) key: o uuid.
    req addEventListener: 'success' handler: [ :e <Alien[Event]> | onPut: e. nil ].
    tx addEventListener: 'complete' handler: completeBlock.
    tx addEventListener: 'error' handler: errorBlock.
)
add: o <IDBObject> onComplete: completeHandler <Closure> onError: errorHandler <Closure> = (
	|
    storeName <String> = (ObjectMirror reflecting: o) getClass mixin name.
    tx <Alien[IDBTransaction]>
    store <Alien[IDBObjectStore]>
    req <Alien[IDBRequest]>
    |
    (* Create the IDBTransaction *)
	tx:: db
    		transaction: storeName
            for: 'readwrite'.

    (* Get the IDBObjectStore from the transaction *)
    store:: tx objectStore: storeName.

    (* Store the model object *)
	req:: store add: (serialize: o) key: o uuid.
    req addEventListener: 'success' handler: [ :e | onAdd: e. nil ].
    tx addEventListener: 'complete' handler: completeHandler.
    tx addEventListener: 'error' handler: errorHandler.
)
delete: o <IDBObject> onComplete: completeBlock <Closure> onError: errorBlock <Closure> = (
	|
	storeName <String> = (ObjectMirror reflecting: o) getClass mixin name.
    tx <Alien[IDBTransaction]>
    store <Alien[IDBObjectStore]>
    req <Alien[IDBRequest]>
    |
	tx:: db transaction: storeName for: 'readwrite'.
    store:: tx objectStore: storeName.
    req:: store delete: o uuid.
    req addEventListener: 'success' handler: [ :e <Alien[Event]> |  onDelete: e. nil ].
    tx addEventListener: 'complete' handler: completeBlock.
    tx addEventListener: 'error' handler: errorBlock.
)
get: uuid <UUID> forClass: class <Class[IDBObject]> onComplete: completionHandler <[:IDBObject]> onError: errorHandler <[:Error]> = (
		|
        storeName = (ClassMirror reflecting: class) mixin name.
        tx <Alien[IDBTransaction]>
        store <Alien[IDBObjectStore]>
        req <Alien[IDBRequeste]>
        |
    	tx:: db transaction: storeName for: 'readonly'.
    	store:: tx objectStore: storeName.
    	req:: store get: uuid.
    	req addEventListener: 'success' handler: [ :e <Alien[Event]> |
            | blob <Alien[Blob]> |
            blob:: (e at: 'target') at: 'result'. 
            blob arrayBuffer then: [ :buffer <Alien[ArrayBuffer]> |
            	onGet: (deserialize: buffer).
            	nil
            ] onError: [ :ex | failureHandler value:  'Error loading data: ', ex printString. nil].
            nil 
		].
   		tx addEventListener: 'complete' handler: [ :e <Event> | completionHandler value: e. nil ].
   		tx addEventListener: 'error' handler: [ :e <Event> | errorHandler value: e. nil ].
)
public openDB: version <Integer> onSuccess: successHandler <[:Alien[Event]]> = (
	openDB: version onSuccess: successHandler onFailure: [ :ex | nil ]
)
public openDB: version <Integer> onSuccess: successHandler <[:Alien[Event]]> onFailure: failureHandler <[:Alien[Event]]> = (
	|
	request <Alien[IDBOpenRequest]>	= indexedDB open: databaseName version: version.
    |
    request addEventListener: 'upgradeneeded' with: [ :e <Alien[Event]> | onUpgradeNeeded: e. nil ].
    request addEventListener: 'blocked' with: [ :e <Alien[Event]> | onBlocked: e. nil ].
    request addEventListener: 'success' with: [ :e <Alien[Event]> |  successHandler value: e. nil ].
    request addEventListener: 'error' with: [ :e <Alien[Event]> | failureHandler value: e. nil ].
	'IDBSubject openDB called' out.
)
public openDB: version <Integer> = (
	openDB: version onSuccess: [ :e | onOpen: e. nil ].
)
) : (
)
) : (
)
