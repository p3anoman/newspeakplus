Newspeak3
'Root'
public class IndexedDB usingPlatform: p = (
	|
		(* :exemplar: IndexedDB usingPlatform: platform *)
        (*
        	Implements the browser API of the same name.
			Copyright 2024 John McKeon.
            MIT License. Use at your own risk.
    	*)
    private List <List> = p collections List.
    private ObjectMirror <ObjectMirror> = p mirrors ObjectMirror.
    private ClassMirror <ClassMirror> = p mirrors ClassMirror.
	public Subject <Subject> = p hopscotch Subject.
	private Serializer <Serializer> = p victoryFuel Serializer.
	private Deserializer <Deserializer> = p victoryFuel Deserializer.
    private ByteArray <ByteArray> = p victoryFuel ByteArray.

    private crypto <Alien[Crypto]> = p js global at: 'crypto'.
    private JSPromise <Alien[Promise]> = p js global at: 'Promise'.
	private JSObject <Alien[Object]> = p js global at: 'Object'.
    private JSArray <Alien[Array]> = p js global at: 'Array'.
    private JSUint8Array <Alien[Uint8Array]> = p js global at: 'Uint8Array'.
    private JSBlob <Alien[Blob]> = p js global at: 'Blob'.
    private JSFileReader <Alien[FileReader]> = p js global at: 'FileReader'.
    
    (* The browser's IndexedDB API object *)
    private indexedDB <Alien[IndexedDB]> = p js global at: 'indexedDB'.
    private fileReader <Alien[FileReader]> = JSFileReader new.
	|
) (
public class IDBObject new = (
	| public uuid = crypto randomUUID. |
) (
) : (
)
public class IDBSubject onModel: m <Object>
										modelClasses: mc <Array[Class[IDBObject]]>
                                        databaseName: n <String>
                                        databaseVersion: v <Integer>
(* :exemplar_1: [
	| 
    Klass = ClassDeclarationBuilder fromSource: 'public class ApplicationModel = (| public version ::= 1. |)()'.
    ModelKlass = ClassDeclarationBuilder fromSource: 'class IDBObjectClass = (| public slot1 ::= 'dummy'. public slot2 ::= 'foo'. |)()'.
    |
    Klass install.
    ModelKlass install.
	IDBSubject onModel: ApplicationModel new modelClasses: { IDBObjectClass } databaseName: 'TestDB' databaseVersion: 1984 ] value
*)
= Subject onModel: m (
	|
 	(* The connection to the application's database *)
 	public db <Alien[IDBDatabase]>
 	public modelClasses <Array> = mc.
    public databaseName = n.
    public databaseVersion = v.
	|
) (
add: o <IDBObject> = (
	add: o onComplete: [ :e | ] onError: [ :e | ]
)
delete: o <IDBObject> = (
	delete: o onComplete: [ :e | ] onError: [ :e | ]
)
put: o <IDBObject> = (
	put: o onComplete: [ :e | ] onError: [ :e | ]
)
delete: o <IDBObject> onComplete: completeBlock <Closure> onError: errorBlock <Closure> = (
	|
    tx <Alien[IDBTransaction]>
    store <Alien[IDBObjectStore]>
	s <String> = (ObjectMirror reflecting: o) getClass mixin name.
    |
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: completeBlock.
    tx addEventListener: 'error' handler: errorBlock.
    store:: tx objectStore: s.
    store delete: o uuid.
)
onAdd: event  <Alien[Event]> = (
	(* 'Success' out. *)
)
put: o <IDBObject> onComplete: completeBlock onError: errorBlock = (
	|
    tx <Alien[IDBTransaction]>
    store <Alien[IDBObjectStore]>
    req <Alien[IDBRequest]>
	s <String> = (ObjectMirror reflecting: o) getClass mixin name.
    |
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: completeBlock.
    tx addEventListener: 'error' handler: errorBlock.
    store:: tx objectStore: s.
    req:: store put: (serialize: o).
    req addEventListener: 'success' handler: [ :e <Alien[Event]> | self onPut: e. nil ]
)
add: o <IDBObject> onComplete: completeHandler <Closure> onError: errorHandler <Closure> = (
	|
    m <ObjectMirror> = ObjectMirror reflecting: o.
	s <String> = m getClass mixin name.
    tx <Alien[IDBTransaction]>
    store <Alien[IDBObjectStore]>
    req <Alien[IDBRequest]>
    serialized = serialize: o.
    |
   (* Create the IDBTransaction *)
	tx:: db transaction: s for: 'readwrite'.
    tx addEventListener: 'complete' handler: completeHandler.
    tx addEventListener: 'error' handler: errorHandler.

    (* Get the IDBObjectStore from the transaction *)
    store:: tx objectStore: s.

    (* Store the model object *)
	req:: store add: serialized.
    req addEventListener: 'success' handler: [ :e | self onAdd: e. nil ]
)
onBlocked: e <Alien[Event]> = (
	(* 'Blocked triggered' out. *)
)
onGet: e <Alien[Event]> = (
	(* 'Get triggered' out. *)
)
onTxComplete: event  <Alien[Event]> = (
	(* 'Transaction complete triggered' out. *)
)
onPut: event  <Alien[Event]> = (
	(* 'put succeeded' out. *)
)
get: u <UUID> forClass: c <Class[IDBObject]> onComplete: complete = (
		|
        storeName <String> = (ClassMirror reflecting: c) mixin name.
        tx <Alien[IDBTransaction]>
        store <Alien[IDBObjectStore]>
        req <Alien[IDBRequeste]>
        |
    	tx:: db transaction: storeName for: 'readonly'.
   		tx addEventListener: 'complete' handler: [ :e <Event> | onTxComplete: e. nil ].
    	store:: tx objectStore: storeName.
    	req:: store get: u.
    	req addEventListener: 'success' handler: [ :e <Event> |
        	| o <Alien[JSObject]> = (e at: 'target') at: 'result'. |
			deserialize: o onSuccess: [ :m <IDBObject> |
                complete value: m.
                nil ].
           nil 
		]
)
getKeysFor: k <Class[IDBObject]> onComplete: completionHandler <Closure> = (
		|
        storeName <String> = (ClassMirror reflecting: k) mixin name.
        tx <Alien[IDBTransaction]>
        store <Alien[IDBObjectStore]>
        req <Alien[IDBRequeste]>
        r <List[String]> = List new.
        |
    	tx:: db transaction: storeName for: 'readonly'.
    	store:: tx objectStore: storeName.
    	req:: store getAllKeys.
    	req addEventListener: 'success' handler: [ :e <Event> |
			| a <Alien[Array[String]]> = (e at: 'target') at: 'result'. |
      		1 to: (a at: 'length') do: [ :i <Integer> | r add: (a at: (i - 1)) ].
        	completionHandler value: r.
            nil
        ].
   		tx addEventListener: 'complete' handler: [ :e <Event> | onTxComplete: e. nil ].
)
onUpgradeNeeded: event <Alien[Event]> = (
	(* The default handler for the 'upgradeneeded' event generated on version change. *)
    (* This default 'Version 1' creates the required IDBObjectStores according to the classes returned by the modelClasses method as overridden by the application Subject *)
    (* This method plays a central role in making database/model schema changes throughout the application lifecycle. *)
	| o <Alien[JSObject]> = JSObject new. |
    'upgradeneeded triggered' out.
    db::  (event at: #target) at: #result.
	o  at: 'keyPath' put: 'uuid'.
   	modelClasses do: [ :m <Class[IDBObject]> |
		db createObjectStore: m name with: o.
    ].
)
openDB: version <Integer> = (
	openDB: version onComplete: [ :e | onOpen: e. nil ].
)
deserialize: o <Alien[Object]> onSuccess: successHandler <Closure> = (
	| blob <Alien[Blob]> = o at: 'psoup'. |
    readBlob: blob
    onComplete: [ :bytes <ByteArray> |
		|
        deserializer <Deserializer> = Deserializer new. 
        rslt
        |
        (* pause. *)
        rslt:: deserializer deserialize: bytes.
        successHandler value: rslt.
        nil
	].
)
readBlob: blob <Alien[Blob]> onComplete: completeHandler <Closure> = (
	| fileReader = JSFileReader new. bytes |	
    fileReader addEventListener: 'loadend' handler: [ :e <Alien[ProgressEvent]> |
    	|
        reader <Alien[FileReader]> = e at: 'target'.
		buffer <Alien[ArrayBuffer]> = reader at: 'result'.
		ui8 <Alien[Uint8Array]> = JSUint8Array new: buffer.
        n <Integer> = ui8 at: 'byteLength'.
        |
    	bytes:: ByteArray new: n.
    	1 to: n do: [ :i | bytes at: i put: (ui8 at: (i - 1)) ].
        completeHandler value: bytes.
        nil
    ].
    fileReader readAsArrayBuffer: blob
)
openDB: version <Integer> onComplete: completionHandler <[]> = (
	|
	request <Alien[IDBOpenRequest]>	= indexedDB open: databaseName version: version.
    |
    request addEventListener: 'upgradeneeded' with: [ :e <Alien[Event]> | onUpgradeNeeded: e. nil ].
    request addEventListener: 'blocked' with: [ :e <Alien[Event]> | onBlocked: e. nil ].
    request addEventListener: 'error' with: [ :e <Alien[Event]> | Error signal: ((e at: #error) at: #message). nil ].
    request addEventListener: 'success' with: [ :e <Alien[Event]> |
    	(* db:: (e at: #target) at: #result. *)
        completionHandler value: e.
        nil
	].
	'IDBSubject openDB called' out.
)
public blobFromBytes: bytes = (
	|
    ui8 <Alien[Uint8Array]> = JSUint8Array new: bytes size.
    blobParts <Alien[Array]> = JSArray new.
	options <Alien[Object]> = JSObject new.
    |
	1 to: bytes size do: [ :i | ui8 at: (i - 1) put: (bytes at: i) ]. 
    blobParts at: 0 put: ui8.
    options at: 'type' put: 'application/octet-stream'.
	^JSBlob new: blobParts with: options.
)
public openDB = (
	openDB: databaseVersion.
)
onGetAll: r <List[IDBObject]> = (
	(* 'Get all triggered' out. *)
)
onTxError: event  <Alien[Event]> = (
	'Transaction error triggered' out.
)
serialize: anObject <IDBObject>^<Alien[Object]> = (
	|
    serializer = Serializer new.
    bytes <ByteArray> = serializer serialize: anObject.
	jso <Alien[Object]> = JSObject new.
    blob = blobFromBytes: bytes.
    |
    jso at: 'uuid' put: anObject uuid.
	jso at: 'psoup' put: blob.
	^jso
)
onOpen: event <Alien[Event]> = (
	'onOpen DB called' out.
    db:: (event at: #target) at: #result.
    modelClasses do: [ :m |
        	getAll: m
            onSuccess: [ :r <List[IDBObject]> | onGetAll: r. nil ]
            onFailure: [ :err | nil ].
    ].
)
getAll: c <Class[IDBObject]> onSuccess: successBlock<[:List[IDBObject]]> onFailure: failureBlock <[:Error]> = (
		|
        tx <Alien[IDBTransaction]>
        store <Alien[IDBObjectStore]>
        req <Alien[IDBOpenRequest]>
        |
    	tx:: db transaction: c name for: 'readonly'.
    	store:: tx objectStore: c name.
    	req: store getAll.
    	req addEventListener: 'success' handler: [ :e <Alien[Event]> |
        	|
            a <JSArray[Alien[Object]]> = (e at: 'target') at: 'result'.
            n <Integer> = a at: 'length'.
            promises <JSArray[Alien[Promise]]> = JSArray new: n.
            results <List[IDBObject]> = List new.
            |
            (* Read the data out of each blob *)
    		0 to: (n - 1) do: [ :i <Integer> |
            	| o = a at: i. blob = o at: 'psoup'. |
            	promises at: i put: blob arrayBuffer 
            ].
            (* Process *)
			(JSPromise all: promises) then: [ :buffers <JSArray[Alien[ArrayBuffer]]> |
            	0 to: (n - 1) do: [ :j <Integer> |
            		| 
                    buffer <Alien[ArrayBuffer]> = buffers at: j.
                    ui8 <Alien[JSUint8Array]> = JSUint8Array new: buffer.
                    size <Integer> = ui8 at: 'length'.
                    b <ByteArray> = ByteArray new: size.
                    ds <Deserializer> = Deserializer new.
                    |
                    (* Move the bytes into a ByteArray *)
                    1 to: size do: [ :k <Integer> | b at: k put: (ui8 at: (k - 1)) ].
                    (* pause. *)
                    results add: (ds deserialize: b)
				].
                nil
            ] onError: [ :ex <Error> | failureBlock value: 'Failed to load data: ', ex printString. nil ].
            successBlock value: results.
			nil.
		].
   		tx addEventListener: 'complete' handler: [ :e <Alien[Event]> | onTxComplete: e. nil ].
)
) : (
)
) : (
)
