public class CodeMirrorFragment onText: t <String> = LeafFragment (
|
    public editor <Alien[CodeMirror]>
	textSlot <TextFragment | String> ::= t.
	public useEditControls <Boolean> ::= true.
	public counterfactualBar <Alien[Span]>
	public messageContainer <Alien[Span]>
	public isInEditState ::= false.
	public changeResponse <[TextEditorFragment]>
	public acceptResponse <[TextEditorFragment]>
	public cancelResponse <[TextEditorFragment]>
    public evaluateResponse <[TextEditorFragment]>
	styles ::= List new.
	public beforeChangeHandler <CallBackWrapper>
	public changeHandler <CallBackWrapper>
	public keyHandler <CallBackWrapper>
	lastChangeWasSynthetic <Boolean> ::= false.
	public readOnly <Boolean> ::= false.
|
) (
applyStyle: style <{Integer. Integer. Alien[JSObject]}> = (
	| s <Alien[CodeMirrorPosition]> e <Alien[CodeMirrorPosition]> |
	(* Newspeak intervals are 1-origin and [start, stop]. JS intervals are 0-origin and [start, stop). *)
	s:: editor posFromIndex: (style at: 1) - 1.
	e:: editor posFromIndex: (style at: 2).
	editor markText: s to: e style: (style at: 3).
)
applyStyles = (
    nil = editor ifFalse: [
	styles do: [: s <{Integer. Integer. Alien[JSObject]}> |
	applyStyle: s
	].
     styles:: List new.
     editor refresh.
   ]
)
public defaultAcceptResponse = (
	textSlot:: editor getValue.
	leaveEditState
)
public defaultCancelResponse = (
	editor setValue: textSlot.
	leaveEditState
)
public defaultChangeResponse = (
	updateEditState
)
defaultStyle ^ <Alien[Object]> = (
	| style <Alien[JSObject]> = JSObject new. |
	style at: 'css' put: 
		'color:', styleDefaultEditorTextColor, ';',
		'font-family:', styleFontFamilySerif, ';',
		'text-decoration: none; font-weight: normal'.
    ^style
)
public isKindOfCodeMirrorFragment ^ <Boolean> = (
	^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfCodeMirrorFragment
)
public noticeExposure = (
  refresh
)
public refresh = (
  applyStyles
)
registerBeforeChangeHandler = (
      beforeChangeHandler:: CallBackWrapper wrapping: [:codeMirror :change | respondToBeforeChange: codeMirror. nil].
      editor on: 'beforeChange' respondToChange: beforeChangeHandler wrappedCallback.
)
registerChangeHandler = (
      changeHandler:: CallBackWrapper wrapping: [:codeMirror :change | respondToChange: codeMirror. nil].
      editor on: 'change' respondToChange: changeHandler wrappedCallback.
)
registerKeyHandler = (
      keyHandler:: CallBackWrapper wrapping: [:codeMirror :keydown | respondToKeyDown: codeMirror. nil].
      editor on: 'keydown' respondToKeyDown: keyHandler wrappedCallback.
)
public resetStyles = (
  hasVisual ifFalse: [^self].
  editor markText:  (editor posFromIndex: 0) to: (editor posFromIndex: textBeingAccepted size - 1) style: defaultStyle
)
respondToAccept: event <Alien[Event]> = (
	nil = acceptResponse
		ifTrue: [defaultAcceptResponse]
		ifFalse: [acceptResponse cull: self cull: event]
)
respondToCancel = (
	(*confirm: 'Confirm Cancel' ifConfirmed:
		[*)nil = cancelResponse
			ifTrue: [defaultCancelResponse]
			ifFalse: [cancelResponse cull: self](*]*)
)
respondToEvaluate = (
    nil = evaluateResponse 
        ifFalse: [evaluateResponse cull: self]
)
respondToBeforeChange: event <Alien[Event]> = (	
	updateEditState
)
respondToChange: event <Alien[Event]> = (	
	nil = changeResponse
		ifTrue: [defaultChangeResponse]
		ifFalse: [changeResponse cull: self cull: event].
)
public style: style <Alien[JSObject]> from: start <Integer> to: end <Integer>  = (
	styles add: {start. end. style}.
	applyStyles
)
public text: t = (
      textSlot:: t.
	hasVisual ifTrue: [editor setValue: t].
)
public textBeingAccepted ^ <String> = (
  ^editor getValue
)
public updateEditState = (
	lastChangeWasSynthetic ifTrue: [lastChangeWasSynthetic:: false. ^self].
	
	isInEditState ifFalse:
		[
        visual.		
		useEditControls ifTrue: [
			(counterfactualBar at: 'style') 
				at: 'opacity' put: '1.0'.
		].
		isInEditState:: true
		].
)
public removeMessages = (
	[visual removeChild: messageContainer] on: Error do: [:e | ].
)
public showMessage: message <String> = (
	messageContainer at: 'innerHTML' put: message.
	visual appendChild: messageContainer.
)
public hasPendingChanges ^<Boolean> = (
    ^isInEditState
)
public leaveEditState = (
	isInEditState ifTrue:
		[
		useEditControls ifTrue: [
			(counterfactualBar at: 'style')
				at: 'opacity' put: '0.0'.		
		].
	    removeMessages.		        
		isInEditState:: false.
		]
)
updateVisualsFromSameKind: oldFragment <CodeMirrorFragment>  ^ <Alien[CodeMirror]> = (
	isInEditState:: oldFragment isInEditState.
	beforeChangeHandler:: oldFragment beforeChangeHandler.
	changeHandler:: oldFragment changeHandler.
	keyHandler:: oldFragment keyHandler.
	editor:: oldFragment editor.
	readOnly:: oldFragment readOnly.
      isInEditState ifTrue: [
		textSlot:: oldFragment editor getValue
		] ifFalse: [	
		lastChangeWasSynthetic:: true.
		editor setValue: textSlot.
		oldFragment leaveEditState.
		].

	useEditControls ifTrue: [
		counterfactualBar:: oldFragment counterfactualBar.
		(counterfactualBar at: 'firstChild') at: 'onclick' put:
			[:event | respondToAccept: event. nil].
		(counterfactualBar at: 'lastChild') at: 'onclick' put:
			[:event | respondToCancel. nil].
	].

	messageContainer:: oldFragment messageContainer.

	beforeChangeHandler callback: [:codeMirror :change | respondToBeforeChange: codeMirror. nil].
    changeHandler callback: [:codeMirror :change | respondToChange: codeMirror. nil].
	keyHandler callback: [:codeMirror :change | respondToKeyDown: codeMirror. nil].

	^oldFragment visual
)
public currentLine ^ <String> = (
  ^editor getLine: currentLineNumber
)
public showFragment: message <Fragment> = (
	messageContainer at: 'innerHTML' put: message.
	visual appendChild: messageContainer.
)
public insert: fragment<Fragment> atLine: line<Integer> andColumn: column <Integer> = (
    |
    position = JSObject new.
	replaced = JSObject new.
	visual = fragment visual.
    |
	position 
        at: 'line' put: line;
        at: 'ch' put: column.
    replaced 
        at: 'replacedWith' put: visual;
        at: 'clearWhenEmpty' put: false.
    editor markText: position end: position replacedWith: replaced.
)
public replace: withFragment<Fragment> = (
    |
    start = editor getCursor: 'from'.
    end = editor getCursor: 'to'.
	replaced = JSObject new.
	visual = withFragment visual.
    |
    replaced 
        at: 'replacedWith' put: visual;
        at: 'clearWhenEmpty' put: false.
    editor markText: start end: end replacedWith: replaced.
    editor setCursor: end.
)
public currentLineNumber ^ <Integer> = (
  ^editor getCursor at: #line
)
public currentColumnNumber ^ <Integer> = (
  ^editor getCursor at: #ch
)
public setWidth: w height: h = (
   editor setSize: w height: h
)
respondToKeyDown: event <Alien[Event]> = (
	| 
	key <Character> = event at: 'key'. 
    (* customary on mac, does not work on windows *)
	metaPressed <Boolean> = event at: 'metaKey'.
    (* works on windows *)
    ctrlPressed <Boolean> = event at: 'ctrlKey'.   
    shiftPressed <Boolean> = event at: 'shiftKey'.
	|

	(isInEditState and: [useEditControls]) ifTrue: [
        
	(metaPressed or: [ctrlPressed]) ifTrue: [
			key = 'Enter'
				ifTrue: [ 	
                    event preventDefault.		
					lastChangeWasSynthetic:: true.	
					respondToAccept: event.
                    ^self.
				].
		].

        key = 'Escape'
            ifTrue: [
                event preventDefault.
                lastChangeWasSynthetic:: true.
                respondToCancel.
                ^self.
            ].	
	].

    shiftPressed ifTrue: [
        key = 'Enter'
            ifTrue: [ 		
                event preventDefault.
                lastChangeWasSynthetic:: true.	
                respondToEvaluate.
                ^self.
            ].
    ].
)
createVisual = (
	| 
	container <Alien[Div]> 
	frame <Alien[Div]> 
	buttonA <Alien[Div]> 
	buttonC <Alien[Div]> 
	accept <Alien[Img]> 
	cancel <Alien[Img]> 
	textArea <Alien[Span]> 
	options <Alien[JSObject]> 
    |

	container:: document createElement: 'div'.
	container at: 'id' put: 'CodeMirrorContainer'.
	(container at: 'style')
		at: 'display' put: 'flex';
		at: 'flex-direction' put: 'column';
		at: 'width' put: '99%';
		at: 'min-height' put: styleTextInputHeight;
		at: 'background-color' put: 'white';
		at: 'opacity' put: 1.0;
		at: 'border-style' put: 'solid';
		at: 'border-width' put: '1px';
		at: 'border-color' put: styleBorderColor.

	useEditControls ifTrue: [
		counterfactualBar:: document createElement: 'div'.
		(counterfactualBar at: 'style')
			at: 'display' put: 'flex';
			at: 'flex-direction' put: 'row';
			at: 'align-items' put: 'center';
			at: 'justify-content' put: 'flex-end';
			at: 'z-index' put: '10';
			at: 'opacity' put: '0.0';
			at: 'width' put: 'auto';
			at: 'pointer-events' put: 'none'.

    buttonA:: document createElement: 'div'.
    buttonA at: 'title' put: 'Accept changes'.

		accept:: document createElement: 'img'.
		accept at: 'src' put: (accept16px yourself at: 'src').
		(accept at: 'style') 
			at: 'width' put: '22px';
			at: 'pointer-events' put: 'auto'.
		accept at: 'onclick' put:
			[:event | respondToAccept: event. nil].
    buttonA appendChild: accept.
		counterfactualBar appendChild: buttonA.

    buttonC:: document createElement: 'div'.
    buttonC at: 'title' put: 'Cancel changes'.

		cancel:: document createElement: 'img'.
		cancel at: 'src' put: (cancel16px yourself at: 'src').
		(cancel at: 'style') 
			at: 'width' put: '22px';
			at: 'pointer-events' put: 'auto'.
		cancel at: 'onclick' put:
			[:event | respondToCancel. nil].
    buttonC appendChild: cancel.
		counterfactualBar appendChild: buttonC.
		container appendChild: counterfactualBar.
	].

	frame:: document createElement: 'div'.
	frame at: 'id' put: 'CodeMirrorFragment'.
	(frame at: 'style')
		at: 'display' put: 'flex';
		at: 'flex-direction' put: 'row'.
	useEditControls ifTrue: [		
		(frame at: 'style') at: 'margin-top' put: '-20px'.
	].
	container appendChild: frame.

	textArea:: document createElement: 'textarea'.
	textArea
		at: 'value' put:  textSlot;
		at: 'resize' put: true.
	frame appendChild: textArea.

	options:: JSObject new.
	options at: 'lineWrapping' put: true.
	options at: 'readOnly' put: readOnly.
    options at: 'scrollbarStyle' put: 'null'.
	editor:: CodeMirror fromTextArea: textArea with: options.
	registerBeforeChangeHandler.
    registerChangeHandler.
	registerKeyHandler.
	
	((textArea at: 'nextSibling') at: 'style') 
		at: 'height' put: 'unset';
		at: 'width' put: '100%';	
		at: 'background-color' put: 'transparent';
		at: 'fontFamily' put: styleFontFamilySerif;
		at: 'font-size' put: styleFontSizeEditor.

	messageContainer:: document createElement: 'div'.
	(messageContainer at: 'style')
		at: 'background-color' put: '#FFE6B3';
		at: 'border-top' put: '1px solid silver';
		at: 'display' put: 'flex';
		at: 'flex-direction' put: 'row';
		at: 'align-items' put: 'left';
		at: 'vertical-align' put: 'middle';
		at: 'padding-left' put: styleDefaultInset;
        at: 'width' put: '100%';
		at: 'height' put: '20px'.

	^container
)
) : (
)
