class ImageButtonFragment = LeafFragment (
(* A button displayed as an image; or an image that acts as a button. *)
|
	public action <[]>
	public image <Image>
    public toolTip_slot <String>
|) (
public isKindOfImageButtonFragment ^ <Boolean> = (
	^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfImageButtonFragment
)
updateVisualsFromSameKind: oldFragment <Fragment> ^ <Alien[Element]> = (
| oldVisual = oldFragment visual. img = oldVisual at: 'firstChild'.|
  #BOGUS.  (* what if the actual image is different? *)
   img at: 'onclick' put: [:event | action value. false].
   ^oldVisual
)
toolTip = (
| tip |
	toolTip_slot ifNil: [ 
	image = images accept16px ifTrue: [ toolTip_slot:: 'Accept these changes' ] ifFalse: [
    image = images cancel16px ifTrue: [ toolTip_slot:: 'Cancel all changes' ] ifFalse: [ 
    image = images backImage ifTrue: [ toolTip_slot:: 'Go back' ] ifFalse: [
    image = images classIcon ifTrue: [ toolTip_slot:: 'Class' ] ifFalse: [
	image = images classPresenterIcon ifTrue: [toolTip_slot::  'Class Presenter' ] ifFalse: [
	image = images classUnknownIcon ifTrue: [ toolTip_slot:: 'Unknown class' ] ifFalse: [
	image = images clearImage ifTrue: [toolTip_slot::  'Clear' ] ifFalse: [
	image = images collapseImage ifTrue: [ toolTip_slot:: 'Collapse' ] ifFalse: [
	image = images disclosureClosedImage ifTrue: [ toolTip_slot:: 'Close disclosure' ] ifFalse: [
	image = images disclosureOpenImage ifTrue: [ toolTip_slot:: 'Open disclosure' ] ifFalse: [
	image = images downloadImage ifTrue: [ toolTip_slot:: 'Download' ] ifFalse: [
	image = images dropDownImage ifTrue: [ toolTip_slot:: 'Drop down' ] ifFalse: [
	image = images expandImage ifTrue: [ toolTip_slot:: 'Expand' ] ifFalse: [
	image = images findImage ifTrue: [ toolTip_slot:: 'Find' ] ifFalse: [
	image = images forwardImage ifTrue: [ toolTip_slot:: 'Go forward' ] ifFalse: [
	image = images helpImage ifTrue: [ toolTip_slot:: 'Help' ] ifFalse: [
	image = images historyImage ifTrue: [ toolTip_slot:: 'History' ] ifFalse: [
	image = images homeImage ifTrue: [toolTip_slot::  'Go home' ] ifFalse: [
	image = images itemReferencesImage ifTrue: [ toolTip_slot:: 'References (Implementors and senders)' ] ifFalse: [
	image = images newImage ifTrue: [ toolTip_slot:: 'New' ] ifFalse: [
 	image = images peekingeye1610 ifTrue: [ toolTip_slot:: 'Big brother is watching you!' ] ifFalse: [
	image = images privateAccessImage ifTrue: [ toolTip_slot:: 'Private access' ] ifFalse: [
	image = images protectedAccessImageifTrue: [toolTip_slot::  'Protected access' ] ifFalse: [
	image = images publicAccessImage ifTrue: [ toolTip_slot:: 'Public access' ] ifFalse: [
	image = images refreshImage ifTrue: [ toolTip_slot:: 'Refresh' ] ifFalse: [
  image = images saveImage ifTrue: [ toolTip_slot:: 'Save' ] ifFalse: [
  toolTip_slot:: '']]]]]]]]]]]]]]]]]]]]]]]]]]].
	^toolTip_slot
)
createVisual ^ <Visual> = (
	| div img |
	div:: document createElement: 'div'.
    div at: 'id' put: 'ImageButtonFragment'.
	(div at: 'style')
		at: 'display' put: 'flex';
		at: 'flex-direction' put: 'flex-column';		
		at: 'align-items' put: 'center';
		at: 'cursor' put: 'pointer'.
    div at: 'title' put: toolTip.
    
    img:: image cloneNode: false (* Not deep *).

    width = -1 ifFalse: [ widthStyle:: width printString, 'px' ].
    height = -1 ifFalse: [ heightStyle:: height printString, 'px' ].

	(img at: 'style')
		at: 'width' put: widthStyle;
		at: 'height' put: heightStyle;
        at: 'object-fit' put: 'contain'.

    img at: 'onclick' put: [:event | action value. false].

    img
        addEventListener: 'mousedown' action:
		    [:event | (img at: 'style') at: 'filter' put: 'brightness(120%)'. nil];
        addEventListener: 'mouseover' action:
		    [:event | (img at: 'style') at: 'filter' put: 'brightness(80%)'. nil];
        addEventListener: 'mouseout' action:
			[:event | (img at: 'style') at: 'filter' put: ''. nil].

	div appendChild: img.
	^div
)
) : (
)
