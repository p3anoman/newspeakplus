class ImageButtonFragment = LeafFragment (
(* A button displayed as an image; or an image that acts as a button. *)
|
	public action <[]>
	public image <Image>
|) (
public isKindOfImageButtonFragment ^ <Boolean> = (
	^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfImageButtonFragment
)
updateVisualsFromSameKind: oldFragment <Fragment> ^ <Alien[Element]> = (
| oldVisual = oldFragment visual. img = oldVisual at: 'firstChild'.|
  #BOGUS.  (* what if the actual image is different? *)
   img at: 'onclick' put: [:event | action value. false].
   ^oldVisual
)
toolTip ^<String> = (
	image = images accept16px ifTrue: [ ^'Accept these changes' ].
	image = images cancel16px ifTrue: [ ^'Cancel all changes' ].
	image = images backImage ifTrue: [ ^'Go back' ].
	image = images classIcon ifTrue: [ ^'Class' ].
	image = images classPresenterIcon ifTrue: [ ^'Class Presenter' ].
	image = images classUnknownIcon ifTrue: [ ^'Unknown class' ].
	image = images clearImage ifTrue: [ ^'Clear' ].
	image = images collapseImage ifTrue: [ ^'Collapse' ].
	image = images disclosureClosedImage ifTrue: [ ^'Close disclosure' ].
	image = images disclosureOpenImage ifTrue: [ ^'Open disclosure' ].
	image = images downloadImage ifTrue: [ ^'Download' ].
	image = images dropDownImage ifTrue: [ ^'Drop down' ].
	image = images expandImage ifTrue: [ ^'Expand' ].
	image = images findImage ifTrue: [ ^'Find' ].
	image = images forwardImage ifTrue: [ ^'Go forward' ].
	image = images helpImage ifTrue: [ ^'Help' ].
	image = images historyImage ifTrue: [ ^'History' ].
	image = images homeImage ifTrue: [ ^'Go home' ].
	image = images itemReferencesImage ifTrue: [ ^'References (Implementors and senders)' ].
	image = images newImage ifTrue: [ ^'New' ].
  image = images peekingeye1610 ifTrue: [ ^'Big brother is watching you!' ].
	image = images privateAccessImage ifTrue: [ ^'Private access' ].
	image = images protectedAccessImageifTrue: [ ^'Protected access' ].
	image = images publicAccessImage ifTrue: [ ^'Public access' ].
	image = images refreshImage ifTrue: [ ^'Refresh' ].
  image = images saveImage ifTrue: [ ^'Save' ].
  ^''
)
createVisual ^ <Visual> = (
	| div img toolTip |
	div:: document createElement: 'div'.
    div at: 'id' put: 'ImageButtonFragment'.
	(div at: 'style')
		at: 'display' put: 'flex';
		at: 'flex-direction' put: 'flex-column';
		at: 'align-items' put: 'center';
		at: 'cursor' put: 'pointer'.
    toolTip:: toolTipForImage: image.
    div at: 'title' put: toolTip.

    img:: image cloneNode: false (* Not deep *).

    width = -1 ifFalse: [ widthStyle:: width printString, 'px' ].
    height = -1 ifFalse: [ heightStyle:: height printString, 'px' ].

	(img at: 'style')
		at: 'width' put: widthStyle;
		at: 'height' put: heightStyle;
        at: 'object-fit' put: 'contain'.

    img at: 'onclick' put: [:event | action value. false].

    img
        addEventListener: 'mousedown' action:
		    [:event | (img at: 'style') at: 'filter' put: 'brightness(120%)'. nil];
        addEventListener: 'mouseover' action:
		    [:event | (img at: 'style') at: 'filter' put: 'brightness(80%)'. nil];
        addEventListener: 'mouseout' action:
			[:event | (img at: 'style') at: 'filter' put: ''. nil].

	div appendChild: img.
	^div
)
) : (
)
