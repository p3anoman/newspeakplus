Newspeak3
'Root'
class CounterApp packageUsing: manifest = (
	|
	Croquet = manifest Croquet.
	|
) (
public class Counter usingPlatform: p croquet: c = (
	|
    Presenter = p hopscotch Presenter.
	CroquetSubject = c CroquetSubject.
    CroquetConfiguration = c CroquetConfiguration.
	|
) (
public class CounterSubject onModel: m = CroquetSubject
																			onModel: m
																			withConfiguration: (CroquetConfiguration
                                                                            											apiKey: '<Your ApiKey goes here>'
                                                                                                                        appId: '<Your AppId goes here>'
                                                                                                                        registerName: 'Counter') (
	| connected ::= false. |
) (
isMyKind: other = (
	^other isKindOfCounterSubject
)
public isKindOfCounterSubject = (
	^true
)
public createPresenter = (
	^CounterPresenter onSubject: self
)
croquetModelSource = (
	^'class CroquetModel extends Multisynq.Model {
    		init() {
            	this.count = 0
            	this.subscribe(this.sessionId,"increment",this.increment)
                this.subscribe(this.sessionId,"decrement",this.decrement)
                this.subscribe(this.sessionId,"reset",this.reset)
			}
            increment() {
            	this.count += 1
                this.publish(this.sessionId,"update")
            }
            decrement() {
            	this.count -= 1
                this.publish(this.sessionId,"update")
            }
            reset() {
            	this.count = 0
                this.publish(this.sessionId,"update")
            }
	}
    return CroquetModel
    '
)
setup = (
    	(croquetView at: 'prototype') at: 'onUpdate' put: [ :x | onUpdate. nil ].
)
croquetViewSource = (
	^'class CroquetView extends Multisynq.View {
    	constructor(model) {
            super(model)
            this.model = model
            this.subscribe(model.sessionId,"update",this.onUpdate)
            this.onconnect(this)
		}
    } return CroquetView'
)
onUpdate = ( 'onUpdate called' out.
	(* count:: (croquetInstance at: 'model') at: 'count'. count printString out. *)
    presenter refresh.
)
public count = (
	^(croquetInstance at: 'model') at: 'count'.
)
public isConnected = (
	^connected
)
public decrement = (
	croquetInstance publish: croquetSessionId message: 'decrement'
)
public increment = (
	croquetInstance publish: croquetSessionId message: 'increment'
)
public reset = (
	croquetInstance publish: croquetSessionId message: 'reset'
)
public startup: onComplete <[:CroquetSubject]> = (
	synq: [:this <Alien[CroqueView]> |
            croquetSessionId: ((this at: 'model') at: 'sessionId').
        	croquetInstance: this.
            connected ifFalse: [
            	connected:: true.
            	onComplete value: self
            ].
            nil ]
)
) : (
)
class CounterPresenter onSubject: s = Presenter onSubject: s (
) (
isMyKind: other = (
	^other isKindOfCounterPresenter
)
public isKindOfCounterPresenter = (
	^true
)
public refresh = (
	updateGUI: []
)
definition = (
	^row: {
    	button: '-' action: [ subject decrement ].
        mediumBlank.
        label: subject count printString.
        mediumBlank.
    	button: '+' action: [ subject increment ].
        button: 'Reset' action: [ subject reset ].
	}
)
) : (
)
) : (
)
public main: platform args: a = (
	|
    croquetLibrary = Croquet usingPlatform: platform.
    counterLibrary = Counter usingPlatform: platform croquet: croquetLibrary.
    s = counterLibrary CounterSubject onModel: 0.
    |
    s startup: [ :subj <CroquetSubject> |
    	platform hopscotch EmbeddedHopscotchWindow openSubject: subj
   ].
)
) : (
)
