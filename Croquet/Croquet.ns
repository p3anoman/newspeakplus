Newspeak3
'Root'
class Croquet usingPlatform: platform = (
	|
    (* Hopscotch *)
    Presenter = platform hopscotch Presenter.
    Subject = platform hopscotch Subject.

	(* Javascript *)
    JSFunction = platform js global at: 'Function'.
    JSObject = platform js global at: 'Object'.
    JSNumber = platform js global at: 'Number'.

    (* Croquet *)
	MultisynqModel = (platform js global at: 'Multisynq') at: 'Model'.
    MultisynqSession = (platform js global at: 'Multisynq') at: 'Session'.
    MultisynqApp = (platform js global at: 'Multisynq') at: 'App'.
	|
) (
public class CroquetSubject onModel: m withConfiguration: config
(* :exemplar: CroquetSubject
							onModel: 0
                            withConfiguration: (CroquetConfiguration apiKey: 'xyz' appId: 'com.example.croquet' registerName: 'testmodel') *)
= Subject onModel: m (
	|
	croquetModel_slot <Alien[Class]>
	croquetView_slot <Alien[Class]>
    croquetSession <String>
    croquetInstance <Alien[Model]>
    configuration <CroquetConfiguration> = config.
	|
) (
isMyKind: other = (
	^other isKindOfCroquetSubject
)
public isKindOfCroquetSubject = (
	^true
)
croquetModel ^<Alien[CroquetModel]> = (
	croquetModel_slot isNil ifTrue: [ 
    	croquetModel_slot:: (JSFunction new: croquetModelSource) call. ].
	^croquetModel_slot
)
croquetView ^<Alien[CroquetView]>= (
	croquetView_slot isNil ifTrue: [ 
    	croquetView_slot:: (JSFunction new: croquetViewSource) call ].
	^croquetView_slot
)
public createPresenter ^<Presenter> = (
	^CroquetPresenter onSubject: self
)
croquetModelSource ^<String> = (
	^subclassResponsibility
)
public synq: onConnectHandler = ( 'synq:' out.
    (croquetView at: 'prototype') at: 'onconnect' put: onConnectHandler.
	synq.
)
public synq = (
	| options = JSObject new. |
    setup.
    croquetModel register: configuration registerName.    
    options
        at: 'apiKey' put: configuration apiKey;
        at: 'appId' put: configuration appId;
        at: 'name' put: MultisynqApp autoSession;
        at: 'password' put: MultisynqApp autoPassword;
        at: 'model' put: croquetModel;
        at: 'view' put: croquetView.
	MultisynqSession join: options.
)
croquetViewSource ^<String> = (
	^subclassResponsibility
)
setup = (
	(* Your application should override this method to install callback handlers into Newspeak *)
)
) : (
)
public class CroquetPresenter onSubject: s = Presenter onSubject: s (
) (
isMyKind: other = (
	^othe isKindOfCroquetPresenter
)
public isKindOfCroquetPresenter = (
	^true
)
) : (
)
public class CroquetConfiguration apiKey: key <String> appId: id <String> registerName: n <String>
= (
	|
	public apiKey = key.
	public appId = id.
    public registerName = n.
	|
) (
) : (
)
) : (
)
